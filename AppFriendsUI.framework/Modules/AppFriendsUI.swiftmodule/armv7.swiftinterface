// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AppFriendsUI
import AVFoundation
import AVKit
import Alamofire
import AlamofireImage
import AppFriendsCore
@_exported import AppFriendsUI
import CoreData
import CoreStore
import Foundation
import ImageIO
import JGProgressHUD
import MapKit
import MobileCoreServices
import ObjectiveC
import Swift
import UIKit
extension AFTextView {
  open func af_clearText(clearUndo: Swift.Bool)
  open func af_scrollToCaretPositon(animated: Swift.Bool)
  @objc override dynamic open func af_scrollToBottom(animated: Swift.Bool)
  open func af_insertNewLineBreak()
  open func af_insertTextAtCaretRange(_ text: Swift.String)
  open func af_insertTextAtCaretRange(_ text: Swift.String, with attributes: [Foundation.NSAttributedString.Key : Any])
  @discardableResult
  open func af_insertText(_ text: Swift.String, in range: Foundation.NSRange) -> Foundation.NSRange
  open func af_insert(_ text: Swift.String, with attributes: [Foundation.NSAttributedString.Key : Any], in range: Foundation.NSRange) -> Foundation.NSRange
  open func af_setAttributes(_ attributes: [Foundation.NSAttributedString.Key : Any], in range: Foundation.NSRange) -> Foundation.NSAttributedString
  open func af_insertAttributedTextAtCaretRange(_ attributedText: Foundation.NSAttributedString)
  open func af_insertAttributedText(_ attributedText: Foundation.NSAttributedString, in range: Foundation.NSRange) -> Foundation.NSRange
  open func af_clearAllAttributes(in range: Foundation.NSRange)
  open func af_defaultAttributedString(for text: Swift.String) -> Foundation.NSAttributedString
  open func af_prepareForUndo(_ description: Swift.String)
}
extension String {
  public func nsRange(of string: Swift.String) -> Foundation.NSRange
}
public struct ChatSupportedMessageDataTypes : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static var none: AppFriendsUI.ChatSupportedMessageDataTypes
  public static var imageVideo: AppFriendsUI.ChatSupportedMessageDataTypes
  public static var gif: AppFriendsUI.ChatSupportedMessageDataTypes
  public static var location: AppFriendsUI.ChatSupportedMessageDataTypes
  public static var all: AppFriendsUI.ChatSupportedMessageDataTypes
  public typealias Element = AppFriendsUI.ChatSupportedMessageDataTypes
  public typealias ArrayLiteralElement = AppFriendsUI.ChatSupportedMessageDataTypes
  public typealias RawValue = Swift.Int
}
@objc open class HCBaseChatViewController : AppFriendsUI.AFTextViewController, UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate, AppFriendsUI.AFEventSubscriber, AppFriendsUI.HCChatTableHandlerDelegate, AppFriendsUI.HCChatTableViewCellDelegate {
  @objc deinit
  public init?(dialog: AppFriendsUI.AFDialog, supportedMessageDataTypes: AppFriendsUI.ChatSupportedMessageDataTypes? = nil, requireReceipts: Swift.Bool = false, shouldAllowTagging: Swift.Bool = true)
  public init?(dialogID: Swift.String, supportedMessageDataTypes: AppFriendsUI.ChatSupportedMessageDataTypes? = nil, requireReceipts: Swift.Bool = false, shouldAllowTagging: Swift.Bool = true)
  @objc required dynamic public init(coder decoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func didReceiveMemoryWarning()
  open func currentDialog() -> AppFriendsUI.AFDialog?
  override open var tableView: UIKit.UITableView! {
    get
  }
  @objc override open func didPressRightButton(_ sender: Any?)
  @objc override open func didPressLeftButton(_ sender: Any?)
  @objc override dynamic open func textViewDidChange(_ textView: UIKit.UITextView)
  open func messagingCell(atIndexPath indexPath: Foundation.IndexPath) -> AppFriendsUI.HCChatTableViewCell
  override open func heightForAutoCompletionView() -> CoreGraphics.CGFloat
  override open func didChangeAutoCompletion(prefix: Swift.String, word: Swift.String)
  override open func showAutoCompletionView(_ show: Swift.Bool)
  @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @objc open func tableView(_ tableView: UIKit.UITableView, didEndDisplaying cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc open func tableView(_ tableView: UIKit.UITableView, willSelectRowAt indexPath: Foundation.IndexPath) -> Foundation.IndexPath?
  @objc open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc open func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
  @objc open func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @objc open func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @objc override dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc override dynamic open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc public func emitEvent(_ event: AppFriendsUI.AFEvent)
  public func messagesWillChange()
  public func messagesDidChange()
  public func messagesWillRefresh()
  public func messagesDidRefresh()
  public func insertMessage(message: AppFriendsUI.AFMessage, indexPath: Foundation.IndexPath)
  open func fillAvatar(atIndexPath indexPath: Foundation.IndexPath, avatarImageView: UIKit.UIImageView?)
  open func message(atIndexPath indexPath: Foundation.IndexPath) -> AppFriendsUI.AFMessage?
  open func didUpdateTypingStatus(_ dialogID: Swift.String, userName: Swift.String, typing: Swift.Bool)
  open func didFailToLoadDialog(_ error: Foundation.NSError?)
  open func onDialogLoaded()
  open func pickLocalImageOrVideo()
  open func openCamera()
  open func pickGif()
  open func shareLocation()
  open func chooseAttachmentButtonTapped()
  open func sendText(text: Swift.String)
  @objc open func sendImage(_ image: UIKit.UIImage)
  open func sendGif(gifImageURL url: Swift.String)
  open func sendLocation(mapItem item: MapKit.MKMapItem)
  open func supportedMessagedTypes() -> AppFriendsUI.ChatSupportedMessageDataTypes
  open func leftBarButtonItem() -> UIKit.UIBarButtonItem?
  @objc open func rightBarButtonItem() -> UIKit.UIBarButtonItem?
  @objc open func avatarImagePlaceHolder(atIndexPath indexPath: Foundation.IndexPath) -> UIKit.UIImage
  @objc open func updateTitle()
  @objc open func didSendTextMessage()
  @objc open func didSendImageMessage()
  @objc open func didSendGifMessage()
  @objc open func didSendVideoMessage()
  @objc open func didSendLocationMessage()
  @objc open func showUserNameOnIncomingMessage() -> Swift.Bool
  @objc open func showUserNameOnOutgoingMessage() -> Swift.Bool
  @objc open func alternateSideForOutgoingMessage() -> Swift.Bool
  @objc open func onlyShowAvatarOnFirstMessageInCluster() -> Swift.Bool
  @objc open func outGoingMessageContentTextColor() -> UIKit.UIColor
  @objc open func incomingMessageContentTextColor() -> UIKit.UIColor
  @objc open func outGoingMessageBubbleColor() -> UIKit.UIColor
  @objc open func incomingMessageBubbleColor() -> UIKit.UIColor
  @objc open func chatUsernameColor() -> UIKit.UIColor
  @objc open func usernameLeftMargin() -> CoreGraphics.CGFloat
  @objc open func messagingCellAttributes(isOutGoingMessage out: Swift.Bool) -> [Foundation.NSAttributedString.Key : Any]
  @objc open func systemMessagingCellAttributes() -> [Foundation.NSAttributedString.Key : Any]
  @objc open func linkTextAttributes(isOutGoingMessage out: Swift.Bool) -> [Foundation.NSAttributedString.Key : Any]
  @objc open func messageImageTapped(attachment imageAttachment: AppFriendsUI.AFImageAttachment, indexPath: Foundation.IndexPath? = nil)
  @objc open func messageVideoTapped(attachment videoAttachment: AppFriendsUI.AFVideoAttachment, indexPath: Foundation.IndexPath? = nil)
  @objc open func messageLocationTapped(attachment locationAttachment: AppFriendsUI.AFLocationAttachment, indexPath: Foundation.IndexPath? = nil)
  @objc open func linkTapped(inCell cell: AppFriendsUI.HCChatTableViewCell, url: Foundation.URL)
  @objc open func failedButtonTapped(inCell cell: AppFriendsUI.HCChatTableViewCell)
  @objc open func avatarTapped(inCell cell: AppFriendsUI.HCChatTableViewCell)
  @objc open func attachmentTapped(inCell cell: AppFriendsUI.HCChatTableViewCell)
  @objc open func didTapAttachment(_ attachment: AppFriendsUI.AFAttachment, indexPath: Foundation.IndexPath? = nil)
  @objc open func reportButtonTapped(inCell cell: AppFriendsUI.HCChatTableViewCell)
  @objc open func showThankYouReportingAlert()
  override public init(tableViewStyle: UIKit.UITableView.Style)
  override public init(collectionViewLayout: UIKit.UICollectionViewLayout)
  override public init(scrollView: UIKit.UIScrollView)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
@objc open class BlockPan : UIKit.UIPanGestureRecognizer {
  @objc open func didPan(_ pan: UIKit.UIPanGestureRecognizer)
  @objc deinit
}
extension UIImageView {
  public func hc_setImage(withURL url: Foundation.URL, placeholderImage: UIKit.UIImage? = nil, filter: AlamofireImage.ImageFilter? = nil, progress: AlamofireImage.ImageDownloader.ProgressHandler? = nil, progressQueue: Dispatch.DispatchQueue = DispatchQueue.main, imageTransition: UIKit.UIImageView.ImageTransition = .noTransition, runImageTransitionIfCached: Swift.Bool = false, completion: ((AlamofireImage.AFIDataResponse<UIKit.UIImage>) -> Swift.Void)? = nil)
}
extension AFTokenInputView {
  open func add(_ token: AppFriendsUI.AFToken)
  open func remove(_ token: AppFriendsUI.AFToken)
  open func remove(atIndex index: Swift.Int)
}
@objc public protocol HCGroupCreatorViewControllerDelegate {
  @objc func usersSelected(_ users: [Swift.String])
  @objc func closeButtonTapped(_ selectVC: AppFriendsUI.HCGroupCreatorViewController)
}
@objc open class HCGroupCreatorViewController : AppFriendsUI.HCContactsViewController, AppFriendsUI.AFTokenInputViewDelegate {
  weak open var delegate: AppFriendsUI.HCGroupCreatorViewControllerDelegate?
  open var dialogID: Swift.String?
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func didReceiveMemoryWarning()
  @objc override public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc override public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  public func tokenInputView(_ view: AppFriendsUI.AFTokenInputView, didChangeTo height: Swift.Float)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public protocol DialogListMonitorDelegate : AnyObject {
  func dialogsListWillChange()
  func dialogsListDidChange()
  func dialogsListWillRefresh()
  func dialogsListDidRefresh()
  func insertDialog(dialog: AppFriendsUI.AFDialog, indexPath: Foundation.IndexPath)
  func removeDialog(dialog: AppFriendsUI.AFDialog, indexPath: Foundation.IndexPath)
  func updateDialog(dialog: AppFriendsUI.AFDialog, indexPath: Foundation.IndexPath)
  func reorderDialog(dialog: AppFriendsUI.AFDialog, fromIndexPath: Foundation.IndexPath, toIndexPath: Foundation.IndexPath)
  func insertSection(indexSec: Foundation.IndexSet)
  func deleteSection(indexSec: Foundation.IndexSet)
}
@objc open class HCOnlineUserHeader : UIKit.UICollectionReusableView {
  @objc override dynamic open func awakeFromNib()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum AFDialogType : Swift.Int {
  case unknown = -1
  case individual = 0
  case group = 1
  case channel = 2
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc open class AFDialog : ObjectiveC.NSObject {
  @objc final public let id: Swift.String
  @objc final public let type: AppFriendsUI.AFDialogType
  @objc open var title: Swift.String? {
    @objc get
    @objc set(newTitle)
  }
  @objc final public let createTime: Foundation.Date?
  @objc open var customData: Swift.String?
  @objc open var muted: Swift.Bool
  @objc open var disabled: Swift.Bool
  @objc open var unreadMessageCount: Swift.Int
  @objc open var coverImageURL: Swift.String?
  @objc open var lastMessageText: Swift.String?
  @objc open var lastMessageTime: Foundation.Date?
  @objc open var members: [AppFriendsUI.AFUser]?
  public init(_ dialogID: Swift.String, type: AppFriendsUI.AFDialogType, unreadMessageCount: Swift.Int = 0, createTime: Foundation.Date? = nil, title: Swift.String? = nil, muted: Swift.Bool = false, disabled: Swift.Bool = false, coverImageURL: Swift.String? = nil, customData: Swift.String? = nil, lastMessageText: Swift.String? = nil, lastMessageTime: Foundation.Date? = nil)
  @objc open func startTyping()
  @objc open func endTyping()
  @objc open func sendText(text: Swift.String, requireReceipt: Swift.Bool = false, mentionedUsers: [Swift.String]? = nil, customData: Swift.String? = nil, sendPush: Swift.Bool = true, completion: ((Foundation.NSError?) -> Swift.Void)? = nil)
  @objc open func sendGif(url: Swift.String, customData: Swift.String? = nil, requireReceipt: Swift.Bool = false, sendPush: Swift.Bool = true, completion: ((Foundation.NSError?) -> Swift.Void)? = nil)
  @objc open func sendImage(image: UIKit.UIImage, customData: Swift.String? = nil, requireReceipt: Swift.Bool = false, sendPush: Swift.Bool = true, completion: ((Foundation.NSError?) -> Swift.Void)? = nil, progress: @escaping (Swift.Int) -> Swift.Void)
  @objc open func sendVideo(videoData: Foundation.Data, customData: Swift.String? = nil, requireReceipt: Swift.Bool = false, sendPush: Swift.Bool = true, completion: ((Foundation.NSError?) -> Swift.Void)? = nil, progress: @escaping (Swift.Int) -> Swift.Void)
  @objc open func sendLocation(mapItem item: MapKit.MKMapItem, customData: Swift.String? = nil, requireReceipt: Swift.Bool = false, sendPush: Swift.Bool = true, completion: ((Foundation.NSError?) -> Swift.Void)? = nil)
  @objc open func resendMessage(message: AppFriendsUI.AFMessage, completion: ((Foundation.NSError?) -> Swift.Void)? = nil)
  @objc open func leaveDialog(completion: ((Foundation.NSError?) -> Swift.Void)? = nil)
  @objc open func mute(completion: ((Foundation.NSError?) -> Swift.Void)? = nil)
  @objc open func unmute(completion: ((Foundation.NSError?) -> Swift.Void)? = nil)
  @objc open func updateDialogName(dialogName name: Swift.String, completion: ((Foundation.NSError?) -> Swift.Void)? = nil)
  @objc open func addMembers(newMembers members: [Swift.String], completion: ((Foundation.NSError?) -> Swift.Void)? = nil)
  @objc open func memberIDs() -> [Swift.String]
  @objc public static func createGroupDialog(dialogID id: Swift.String?, members: [Swift.String], customData: Swift.String? = nil, pushData: Swift.String? = nil, title: Swift.String? = nil, completion: ((Swift.String?, Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func createIndividualDialog(withUser userID: Swift.String, completion: ((Swift.String?, Foundation.NSError?) -> Swift.Void)? = nil)
  public static func checkIfDialogIsMuted(_ dialogID: Swift.String, completion: ((Swift.Bool?, Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func getChannels(completion: (([AppFriendsUI.AFDialog]?, Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func getDialogs(completion: (([AppFriendsUI.AFDialog]?, Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func getDialog(dialogID id: Swift.String, completion: ((AppFriendsUI.AFDialog?, Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func totalUnreadMessageCount() -> Swift.Int
  @objc public static func readAllMessages(dialogID id: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc open class HCUserSearchViewController : AppFriendsUI.HCBaseViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource, UIKit.UISearchBarDelegate {
  @objc @IBOutlet weak open var searchBar: UIKit.UISearchBar!
  @objc @IBOutlet weak open var tableView: UIKit.UITableView!
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func didReceiveMemoryWarning()
  open func userAtIndexPath(_ indexPath: Foundation.IndexPath) -> AppFriendsUI.AFUser?
  @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc open func searchBarSearchButtonClicked(_ searchBar: UIKit.UISearchBar)
  @objc open func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc open class CoreStoreManager : ObjectiveC.NSObject {
  public static var sharedInstance: AppFriendsUI.CoreStoreManager
  public static func store() -> CoreStore.DataStack?
  open func initialize(_ completion: ((Swift.Bool, Foundation.NSError?) -> Swift.Void)? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@objc open class HCDialogSettingViewController : AppFriendsUI.HCBaseViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, AppFriendsUI.AFEventSubscriber {
  open var _tableView: UIKit.UITableView?
  open var _membersCollectionView: UIKit.UICollectionView?
  public init(dialog: AppFriendsUI.AFDialog)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  open func currentDialog() -> AppFriendsUI.AFDialog
  open func createMembersListView() -> UIKit.UIView
  open func createTableView() -> UIKit.UITableView
  open func registerTableCells()
  open func tableFooterView() -> UIKit.UIView
  open func tableSectionView(_ section: Swift.Int) -> UIKit.UIView
  open func closeView()
  open func didLeaveDialog()
  @objc open func leaveDialog()
  @objc open func muteDialog(_ toggle: UIKit.UISwitch)
  open func membersRowTapped()
  open func leftBarButtonItem() -> UIKit.UIBarButtonItem
  @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc open func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @objc open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  open func isMuteConversationRow(_ indexPath: Foundation.IndexPath) -> Swift.Bool
  open func isDialogNameRow(_ indexPath: Foundation.IndexPath) -> Swift.Bool
  open func isMembersRow(_ indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc open func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  open func didClickOnMember(memberID userID: Swift.String)
  open func fillMemberCell(_ cell: AppFriendsUI.HCDialogMemberCollectionViewCell, atIndexPath indexPath: Foundation.IndexPath)
  open func reloadMembersRow()
  @objc public func emitEvent(_ event: AppFriendsUI.AFEvent)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
@objc public protocol AFEventSubscriber {
  @objc func emitEvent(_ event: AppFriendsUI.AFEvent)
}
@objc public enum AFEventName : Swift.Int {
  case eventDialogCreated = 0
  case eventDialogLeft = 1
  case eventDialogUpdated = 2
  case eventTypingStatusUpdated = 4
  case eventMessageReceived = 5
  case eventMessageupdated = 6
  case eventUserSelected = 7
  case eventDuplicateSession = 8
  case eventTotalUnreadCountChange = 9
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc open class AFEvent : ObjectiveC.NSObject {
  @objc final public let name: AppFriendsUI.AFEventName
  @objc final public let data: Any?
  @objc public static func subscribe(subscriber object: AppFriendsUI.AFEventSubscriber)
  @objc public static func unsubscribe(subscriber object: AppFriendsUI.AFEventSubscriber)
  @objc override dynamic public init()
  @objc deinit
}
open class AFTypingStatus {
  @objc deinit
}
@objc public enum HCSideDirection : Swift.Int {
  case left
  case right
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc open class HCSidePanelAnimator : ObjectiveC.NSObject, UIKit.UIViewControllerAnimatedTransitioning, UIKit.UIViewControllerTransitioningDelegate {
  open var slideDirection: AppFriendsUI.HCSideDirection
  open var presenting: Swift.Bool
  @objc open func transitionDuration(using transitionContext: UIKit.UIViewControllerContextTransitioning?) -> Foundation.TimeInterval
  @objc open func animateTransition(using transitionContext: UIKit.UIViewControllerContextTransitioning)
  @objc open func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc open func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc open func interactionControllerForDismissal(using animator: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
  @objc override dynamic public init()
  @objc deinit
}
@objc open class HCContactsViewController : AppFriendsUI.HCBaseViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  open var hiddenUsers: [Swift.String]
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func didReceiveMemoryWarning()
  @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum AFMessageSendingStatus : Swift.Int {
  case sending = 0
  case success = 1
  case failed = 2
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc open class AFMessage : ObjectiveC.NSObject {
  @objc final public let senderID: Swift.String?
  @objc final public let senderName: Swift.String?
  @objc final public let senderAvatar: Swift.String?
  @objc final public let dialogID: Swift.String?
  @objc final public let id: Swift.String?
  @objc open var isSystem: Swift.Bool
  @objc final public let customData: Swift.String?
  @objc open var sendingStatus: AppFriendsUI.AFMessageSendingStatus
  @objc open var read: Swift.Bool
  @objc open var receiveTime: Foundation.Date?
  @objc open var sentTime: Foundation.Date?
  @objc open var text: Swift.String?
  @objc final public let attachment: AppFriendsUI.AFAttachment?
  @objc open var receiptRequired: Swift.Bool
  @objc open func isOutgoing() -> Swift.Bool
  @objc open func markAsRead()
  @objc open func markAsReceived()
  @objc open func getReceipts(completion: (([Swift.String]?, [Swift.String]?, Foundation.NSError?) -> Swift.Void)? = nil)
  @objc open func isSystemMessage() -> Swift.Bool
  @objc public static func getMessage(messageID id: Swift.String, completion: ((AppFriendsUI.AFMessage?, Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func getMessages(dialogID id: Swift.String, startingFrom messageID: Swift.String?, backward: Swift.Bool, count: Swift.Int, completion: (([AppFriendsUI.AFMessage]?, Foundation.NSError?) -> Swift.Void)? = nil)
  @objc override dynamic public init()
  @objc deinit
}
extension UIImage {
  public static func materialDesignIconWithName(_ icon: AppFriendsUI.MaterialDesignIconType, textColor: UIKit.UIColor, size: CoreGraphics.CGSize, backgroundColor: UIKit.UIColor = UIColor.clear) -> UIKit.UIImage
}
extension UIButton {
  public func setMaterialDesignIcon(_ icon: AppFriendsUI.MaterialDesignIconType, forState state: UIKit.UIControl.State)
}
extension UILabel {
  public var materialDesignIcon: AppFriendsUI.MaterialDesignIconType? {
    get
    set(newValue)
  }
}
extension UIBarButtonItem {
  public func setMaterialDesignIcon(_ icon: AppFriendsUI.MaterialDesignIconType, iconSize: CoreGraphics.CGFloat)
  public var GMDIcon: AppFriendsUI.MaterialDesignIconType? {
    get
    set(newValue)
  }
}
public enum MaterialDesignIconType : Swift.Int {
  case gmd3DRotation
  case gmdAccessibility
  case gmdAccountBalance
  case gmdAccountBalanceWallet
  case gmdAccountBox
  case gmdAccountCircle
  case gmdAddShoppingCart
  case gmdAlarm
  case gmdAlarmAdd
  case gmdAlarmOff
  case gmdAlarmOn
  case gmdAndroid
  case gmdAnnouncement
  case gmdAspectRatio
  case gmdAssessment
  case gmdAssignment
  case gmdAssignmentInd
  case gmdAssignmentLate
  case gmdAssignmentReturn
  case gmdAssignmentReturned
  case gmdAssignmentTurnedIn
  case gmdAutorenew
  case gmdBackup
  case gmdBook
  case gmdBookmark
  case gmdBookmarkBorder
  case gmdBugReport
  case gmdBuild
  case gmdCached
  case gmdCameraEnhance
  case gmdCardGiftcard
  case gmdCardMembership
  case gmdCardTravel
  case gmdChangeHistory
  case gmdCheckCircle
  case gmdChromeReaderMode
  case gmdClass
  case gmdCode
  case gmdCreditCard
  case gmdDashboard
  case gmdDelete
  case gmdDescription
  case gmdDns
  case gmdDone
  case gmdDoneAll
  case gmdEject
  case gmdEvent
  case gmdEventSeat
  case gmdExitToApp
  case gmdExplore
  case gmdExtension
  case gmdFace
  case gmdFavorite
  case gmdFavoriteBorder
  case gmdFeedback
  case gmdFindInPage
  case gmdFindReplace
  case gmdFlightLand
  case gmdFlightTakeoff
  case gmdFlipToBack
  case gmdFlipToFront
  case gmdGetApp
  case gmdGif
  case gmdGrade
  case gmdGroupWork
  case gmdHelp
  case gmdHelpOutline
  case gmdHighlightOff
  case gmdHistory
  case gmdHome
  case gmdHourglassEmpty
  case gmdHourglassFull
  case gmdHttp
  case gmdHttps
  case gmdInfo
  case gmdInfoOutline
  case gmdInput
  case gmdInvertColors
  case gmdLabel
  case gmdLabelOutline
  case gmdLanguage
  case gmdLaunch
  case gmdList
  case gmdLock
  case gmdLockOpen
  case gmdLockOutline
  case gmdLoyalty
  case gmdMarkunreadMailbox
  case gmdNoteAdd
  case gmdOfflinePin
  case gmdOpenInBrowser
  case gmdOpenInNew
  case gmdOpenWith
  case gmdPageview
  case gmdPayment
  case gmdPermCameraMic
  case gmdPermContactCalendar
  case gmdPermDataSetting
  case gmdPermDeviceInformation
  case gmdPermIdentity
  case gmdPermMedia
  case gmdPermPhoneMsg
  case gmdPermScanWifi
  case gmdPictureInPicture
  case gmdPlayForWork
  case gmdPolymer
  case gmdPowerSettingsNew
  case gmdPrint
  case gmdQueryBuilder
  case gmdQuestionAnswer
  case gmdReceipt
  case gmdRedeem
  case gmdReorder
  case gmdReportProblem
  case gmdRestore
  case gmdRoom
  case gmdSchedule
  case gmdSearch
  case gmdSettings
  case gmdSettingsApplications
  case gmdSettingsBackupRestore
  case gmdSettingsBluetooth
  case gmdSettingsBrightness
  case gmdSettingsCell
  case gmdSettingsEthernet
  case gmdSettingsInputAntenna
  case gmdSettingsInputComponent
  case gmdSettingsInputComposite
  case gmdSettingsInputHdmi
  case gmdSettingsInputSvideo
  case gmdSettingsOverscan
  case gmdSettingsPhone
  case gmdSettingsPower
  case gmdSettingsRemote
  case gmdSettingsVoice
  case gmdShop
  case gmdShopTwo
  case gmdShoppingBasket
  case gmdShoppingCart
  case gmdSpeakerNotes
  case gmdSpellcheck
  case gmdStarRate
  case gmdStars
  case gmdStore
  case gmdSubject
  case gmdSupervisorAccount
  case gmdSwapHoriz
  case gmdSwapVert
  case gmdSwapVerticalCircle
  case gmdSystemUpdateAlt
  case gmdTab
  case gmdTabUnselected
  case gmdTheaters
  case gmdThumbDown
  case gmdThumbUp
  case gmdThumbsUpDown
  case gmdToc
  case gmdToday
  case gmdToll
  case gmdTrackChanges
  case gmdTranslate
  case gmdTrendingDown
  case gmdTrendingFlat
  case gmdTrendingUp
  case gmdTurnedIn
  case gmdTurnedInNot
  case gmdVerifiedUser
  case gmdViewAgenda
  case gmdViewArray
  case gmdViewCarousel
  case gmdViewColumn
  case gmdViewDay
  case gmdViewHeadline
  case gmdViewList
  case gmdViewModule
  case gmdViewQuilt
  case gmdViewStream
  case gmdViewWeek
  case gmdVisibility
  case gmdVisibilityOff
  case gmdWork
  case gmdYoutubeSearchedFor
  case gmdZoomIn
  case gmdZoomOut
  case gmdAddAlert
  case gmdError
  case gmdErrorOutline
  case gmdWarning
  case gmdAirplay
  case gmdAlbum
  case gmdAvTimer
  case gmdClosedCaption
  case gmdEqualizer
  case gmdExplicit
  case gmdFastForward
  case gmdFastRewind
  case gmdForward10
  case gmdForward30
  case gmdForward5
  case gmdGames
  case gmdHd
  case gmdHearing
  case gmdHighQuality
  case gmdLibraryAdd
  case gmdLibraryBooks
  case gmdLibraryMusic
  case gmdLoop
  case gmdMic
  case gmdMicNone
  case gmdMicOff
  case gmdMovie
  case gmdNewReleases
  case gmdNotInterested
  case gmdPause
  case gmdPauseCircleFilled
  case gmdPauseCircleOutline
  case gmdPlayArrow
  case gmdPlayCircleFilled
  case gmdPlayCircleOutline
  case gmdPlaylistAdd
  case gmdQueue
  case gmdQueueMusic
  case gmdRadio
  case gmdRecentActors
  case gmdRepeat
  case gmdRepeatOne
  case gmdReplay
  case gmdReplay10
  case gmdReplay30
  case gmdReplay5
  case gmdShuffle
  case gmdSkipNext
  case gmdSkipPrevious
  case gmdSnooze
  case gmdSortByAlpha
  case gmdStop
  case gmdSubtitles
  case gmdSurroundSound
  case gmdVideoLibrary
  case gmdVideocam
  case gmdVideocamOff
  case gmdVolumeDown
  case gmdVolumeMute
  case gmdVolumeOff
  case gmdVolumeUp
  case gmdWeb
  case gmdBusiness
  case gmdCall
  case gmdCallEnd
  case gmdCallMade
  case gmdCallMerge
  case gmdCallMissed
  case gmdCallReceived
  case gmdCallSplit
  case gmdChat
  case gmdChatBubble
  case gmdChatBubbleOutline
  case gmdClearAll
  case gmdComment
  case gmdContactPhone
  case gmdContacts
  case gmdDialerSip
  case gmdDialpad
  case gmdEmail
  case gmdForum
  case gmdImportExport
  case gmdInvertColorsOff
  case gmdLiveHelp
  case gmdLocationOff
  case gmdLocationOn
  case gmdMessage
  case gmdNoSim
  case gmdPhone
  case gmdPhonelinkErase
  case gmdPhonelinkLock
  case gmdPhonelinkRing
  case gmdPhonelinkSetup
  case gmdPortableWifiOff
  case gmdPresentToAll
  case gmdRingVolume
  case gmdSpeakerPhone
  case gmdStayCurrentLandscape
  case gmdStayCurrentPortrait
  case gmdStayPrimaryLandscape
  case gmdStayPrimaryPortrait
  case gmdSwapCalls
  case gmdTextsms
  case gmdVoicemail
  case gmdVpnKey
  case gmdAdd
  case gmdAddBox
  case gmdAddCircle
  case gmdAddCircleOutline
  case gmdArchive
  case gmdBackspace
  case gmdBlock
  case gmdClear
  case gmdContentCopy
  case gmdContentCut
  case gmdContentPaste
  case gmdCreate
  case gmdDrafts
  case gmdFilterList
  case gmdFlag
  case gmdFontDownload
  case gmdForward
  case gmdGesture
  case gmdInbox
  case gmdLink
  case gmdMail
  case gmdMarkunread
  case gmdRedo
  case gmdRemove
  case gmdRemoveCircle
  case gmdRemoveCircleOutline
  case gmdReply
  case gmdReplyAll
  case gmdReport
  case gmdSave
  case gmdSelectAll
  case gmdSend
  case gmdSort
  case gmdTextFormat
  case gmdUndo
  case gmdAccessAlarm
  case gmdAccessAlarms
  case gmdAccessTime
  case gmdAddAlarm
  case gmdAirplanemodeActive
  case gmdAirplanemodeInactive
  case gmdBatteryAlert
  case gmdBatteryChargingFull
  case gmdBatteryFull
  case gmdBatteryStd
  case gmdBatteryUnknown
  case gmdBluetooth
  case gmdBluetoothConnected
  case gmdBluetoothDisabled
  case gmdBluetoothSearching
  case gmdBrightnessAuto
  case gmdBrightnessHigh
  case gmdBrightnessLow
  case gmdBrightnessMedium
  case gmdDataUsage
  case gmdDeveloperMode
  case gmdDevices
  case gmdDvr
  case gmdGpsFixed
  case gmdGpsNotFixed
  case gmdGpsOff
  case gmdGraphicEq
  case gmdLocationDisabled
  case gmdLocationSearching
  case gmdNetworkCell
  case gmdNetworkWifi
  case gmdNfc
  case gmdScreenLockLandscape
  case gmdScreenLockPortrait
  case gmdScreenLockRotation
  case gmdScreenRotation
  case gmdSdStorage
  case gmdSettingsSystemDaydream
  case gmdSignalCellular4Bar
  case gmdSignalCellularConnectedNoInternet4Bar
  case gmdSignalCellularNoSim
  case gmdSignalCellularNull
  case gmdSignalCellularOff
  case gmdSignalWifi4Bar
  case gmdSignalWifi4BarLock
  case gmdSignalWifiOff
  case gmdStorage
  case gmdUsb
  case gmdWallpaper
  case gmdWidgets
  case gmdWifiLock
  case gmdWifiTethering
  case gmdAttachFile
  case gmdAttachMoney
  case gmdBorderAll
  case gmdBorderBottom
  case gmdBorderClear
  case gmdBorderColor
  case gmdBorderHorizontal
  case gmdBorderInner
  case gmdBorderLeft
  case gmdBorderOuter
  case gmdBorderRight
  case gmdBorderStyle
  case gmdBorderTop
  case gmdBorderVertical
  case gmdFormatAlignCenter
  case gmdFormatAlignJustify
  case gmdFormatAlignLeft
  case gmdFormatAlignRight
  case gmdFormatBold
  case gmdFormatClear
  case gmdFormatColorFill
  case gmdFormatColorReset
  case gmdFormatColorText
  case gmdFormatIndentDecrease
  case gmdFormatIndentIncrease
  case gmdFormatItalic
  case gmdFormatLineSpacing
  case gmdFormatListBulleted
  case gmdFormatListNumbered
  case gmdFormatPaint
  case gmdFormatQuote
  case gmdFormatSize
  case gmdFormatStrikethrough
  case gmdFormatTextdirectionLToR
  case gmdFormatTextdirectionRToL
  case gmdFormatUnderlined
  case gmdFunctions
  case gmdInsertChart
  case gmdInsertComment
  case gmdInsertDriveFile
  case gmdInsertEmoticon
  case gmdInsertInvitation
  case gmdInsertLink
  case gmdInsertPhoto
  case gmdMergeType
  case gmdModeComment
  case gmdModeEdit
  case gmdMoneyOff
  case gmdPublish
  case gmdSpaceBar
  case gmdStrikethroughS
  case gmdVerticalAlignBottom
  case gmdVerticalAlignCenter
  case gmdVerticalAlignTop
  case gmdWrapText
  case gmdAttachment
  case gmdCloud
  case gmdCloudCircle
  case gmdCloudDone
  case gmdCloudDownload
  case gmdCloudOff
  case gmdCloudQueue
  case gmdCloudUpload
  case gmdFileDownload
  case gmdFileUpload
  case gmdFolder
  case gmdFolderOpen
  case gmdFolderShared
  case gmdCast
  case gmdCastConnected
  case gmdComputer
  case gmdDesktopMac
  case gmdDesktopWindows
  case gmdDeveloperBoard
  case gmdDeviceHub
  case gmdDock
  case gmdGamepad
  case gmdHeadset
  case gmdHeadsetMic
  case gmdKeyboard
  case gmdKeyboardArrowDown
  case gmdKeyboardArrowLeft
  case gmdKeyboardArrowRight
  case gmdKeyboardArrowUp
  case gmdKeyboardBackspace
  case gmdKeyboardCapslock
  case gmdKeyboardHide
  case gmdKeyboardReturn
  case gmdKeyboardTab
  case gmdKeyboardVoice
  case gmdLaptop
  case gmdLaptopChromebook
  case gmdLaptopMac
  case gmdLaptopWindows
  case gmdMemory
  case gmdMouse
  case gmdPhoneAndroid
  case gmdPhoneIphone
  case gmdPhonelink
  case gmdPhonelinkOff
  case gmdPowerInput
  case gmdRouter
  case gmdScanner
  case gmdSecurity
  case gmdSimCard
  case gmdSmartphone
  case gmdSpeaker
  case gmdSpeakerGroup
  case gmdTablet
  case gmdTabletAndroid
  case gmdTabletMac
  case gmdToys
  case gmdTv
  case gmdWatch
  case gmdAddToPhotos
  case gmdAdjust
  case gmdAssistant
  case gmdAssistantPhoto
  case gmdAudiotrack
  case gmdBlurCircular
  case gmdBlurLinear
  case gmdBlurOff
  case gmdBlurOn
  case gmdBrightness1
  case gmdBrightness2
  case gmdBrightness3
  case gmdBrightness4
  case gmdBrightness5
  case gmdBrightness6
  case gmdBrightness7
  case gmdBrokenImage
  case gmdBrush
  case gmdCamera
  case gmdCameraAlt
  case gmdCameraFront
  case gmdCameraRear
  case gmdCameraRoll
  case gmdCenterFocusStrong
  case gmdCenterFocusWeak
  case gmdCollections
  case gmdCollectionsBookmark
  case gmdColorLens
  case gmdColorize
  case gmdCompare
  case gmdControlPoint
  case gmdControlPointDuplicate
  case gmdCrop
  case gmdCrop169
  case gmdCrop32
  case gmdCrop54
  case gmdCrop75
  case gmdCropDin
  case gmdCropFree
  case gmdCropLandscape
  case gmdCropOriginal
  case gmdCropPortrait
  case gmdCropSquare
  case gmdDehaze
  case gmdDetails
  case gmdEdit
  case gmdExposure
  case gmdExposureNeg1
  case gmdExposureNeg2
  case gmdExposurePlus1
  case gmdExposurePlus2
  case gmdExposureZero
  case gmdFilter
  case gmdFilter1
  case gmdFilter2
  case gmdFilter3
  case gmdFilter4
  case gmdFilter5
  case gmdFilter6
  case gmdFilter7
  case gmdFilter8
  case gmdFilter9
  case gmdFilter9Plus
  case gmdFilterBAndW
  case gmdFilterCenterFocus
  case gmdFilterDrama
  case gmdFilterFrames
  case gmdFilterHdr
  case gmdFilterNone
  case gmdFilterTiltShift
  case gmdFilterVintage
  case gmdFlare
  case gmdFlashAuto
  case gmdFlashOff
  case gmdFlashOn
  case gmdFlip
  case gmdGradient
  case gmdGrain
  case gmdGridOff
  case gmdGridOn
  case gmdHdrOff
  case gmdHdrOn
  case gmdHdrStrong
  case gmdHdrWeak
  case gmdHealing
  case gmdImage
  case gmdImageAspectRatio
  case gmdIso
  case gmdLandscape
  case gmdLeakAdd
  case gmdLeakRemove
  case gmdLens
  case gmdLooks
  case gmdLooks3
  case gmdLooks4
  case gmdLooks5
  case gmdLooks6
  case gmdLooksOne
  case gmdLooksTwo
  case gmdLoupe
  case gmdMonochromePhotos
  case gmdMovieCreation
  case gmdMusicNote
  case gmdNature
  case gmdNaturePeople
  case gmdNavigateBefore
  case gmdNavigateNext
  case gmdPalette
  case gmdPanorama
  case gmdPanoramaFishEye
  case gmdPanoramaHorizontal
  case gmdPanoramaVertical
  case gmdPanoramaWideAngle
  case gmdPhoto
  case gmdPhotoAlbum
  case gmdPhotoCamera
  case gmdPhotoLibrary
  case gmdPhotoSizeSelectActual
  case gmdPhotoSizeSelectLarge
  case gmdPhotoSizeSelectSmall
  case gmdPictureAsPdf
  case gmdPortrait
  case gmdRemoveRedEye
  case gmdRotate90DegreesCcw
  case gmdRotateLeft
  case gmdRotateRight
  case gmdSlideshow
  case gmdStraighten
  case gmdStyle
  case gmdSwitchCamera
  case gmdSwitchVideo
  case gmdTagFaces
  case gmdTexture
  case gmdTimelapse
  case gmdTimer
  case gmdTimer10
  case gmdTimer3
  case gmdTimerOff
  case gmdTonality
  case gmdTransform
  case gmdTune
  case gmdViewComfy
  case gmdViewCompact
  case gmdVignette
  case gmdWbAuto
  case gmdWbCloudy
  case gmdWbIncandescent
  case gmdWbIridescent
  case gmdWbSunny
  case gmdBeenhere
  case gmdDirections
  case gmdDirectionsBike
  case gmdDirectionsBoat
  case gmdDirectionsBus
  case gmdDirectionsCar
  case gmdDirectionsRailway
  case gmdDirectionsRun
  case gmdDirectionsSubway
  case gmdDirectionsTransit
  case gmdDirectionsWalk
  case gmdFlight
  case gmdHotel
  case gmdLayers
  case gmdLayersClear
  case gmdLocalActivity
  case gmdLocalAirport
  case gmdLocalAtm
  case gmdLocalBar
  case gmdLocalCafe
  case gmdLocalCarWash
  case gmdLocalConvenienceStore
  case gmdLocalDining
  case gmdLocalDrink
  case gmdLocalFlorist
  case gmdLocalGasStation
  case gmdLocalGroceryStore
  case gmdLocalHospital
  case gmdLocalHotel
  case gmdLocalLaundryService
  case gmdLocalLibrary
  case gmdLocalMall
  case gmdLocalMovies
  case gmdLocalOffer
  case gmdLocalParking
  case gmdLocalPharmacy
  case gmdLocalPhone
  case gmdLocalPizza
  case gmdLocalPlay
  case gmdLocalPostOffice
  case gmdLocalPrintshop
  case gmdLocalSee
  case gmdLocalShipping
  case gmdLocalTaxi
  case gmdMap
  case gmdMyLocation
  case gmdNavigation
  case gmdPersonPin
  case gmdPinDrop
  case gmdPlace
  case gmdRateReview
  case gmdRestaurantMenu
  case gmdSatellite
  case gmdStoreMallDirectory
  case gmdTerrain
  case gmdTraffic
  case gmdApps
  case gmdArrowBack
  case gmdArrowDropDown
  case gmdArrowDropDownCircle
  case gmdArrowDropUp
  case gmdArrowForward
  case gmdCancel
  case gmdCheck
  case gmdChevronLeft
  case gmdChevronRight
  case gmdClose
  case gmdExpandLess
  case gmdExpandMore
  case gmdFullscreen
  case gmdFullscreenExit
  case gmdMenu
  case gmdMoreHoriz
  case gmdMoreVert
  case gmdRefresh
  case gmdAdb
  case gmdAirlineSeatFlat
  case gmdAirlineSeatFlatAngled
  case gmdAirlineSeatIndividualSuite
  case gmdAirlineSeatLegroomExtra
  case gmdAirlineSeatLegroomNormal
  case gmdAirlineSeatLegroomReduced
  case gmdAirlineSeatReclineExtra
  case gmdAirlineSeatReclineNormal
  case gmdBluetoothAudio
  case gmdConfirmationNumber
  case gmdDiscFull
  case gmdDoNotDisturb
  case gmdDoNotDisturbAlt
  case gmdDriveEta
  case gmdEventAvailable
  case gmdEventBusy
  case gmdEventNote
  case gmdFolderSpecial
  case gmdLiveTv
  case gmdMms
  case gmdMore
  case gmdNetworkLocked
  case gmdOndemandVideo
  case gmdPersonalVideo
  case gmdPhoneBluetoothSpeaker
  case gmdPhoneForwarded
  case gmdPhoneInTalk
  case gmdPhoneLocked
  case gmdPhoneMissed
  case gmdPhonePaused
  case gmdPower
  case gmdSdCard
  case gmdSimCardAlert
  case gmdSms
  case gmdSmsFailed
  case gmdSync
  case gmdSyncDisabled
  case gmdSyncProblem
  case gmdSystemUpdate
  case gmdTapAndPlay
  case gmdTimeToLeave
  case gmdVibration
  case gmdVoiceChat
  case gmdVpnLock
  case gmdWc
  case gmdWifi
  case gmdCake
  case gmdDomain
  case gmdGroup
  case gmdGroupAdd
  case gmdLocationCity
  case gmdMood
  case gmdMoodBad
  case gmdNotifications
  case gmdNotificationsActive
  case gmdNotificationsNone
  case gmdNotificationsOff
  case gmdNotificationsPaused
  case gmdPages
  case gmdPartyMode
  case gmdPeople
  case gmdPeopleOutline
  case gmdPerson
  case gmdPersonAdd
  case gmdPersonOutline
  case gmdPlusOne
  case gmdPoll
  case gmdPublic
  case gmdSchool
  case gmdShare
  case gmdWhatshot
  case gmdCheckBox
  case gmdCheckBoxOutlineBlank
  case gmdIndeterminateCheckBox
  case gmdRadioButtonChecked
  case gmdRadioButtonUnchecked
  case gmdStar
  case gmdStarBorder
  case gmdStarHalf
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc open class HCDialogTableViewCell : UIKit.UITableViewCell {
  @objc @IBOutlet weak open var dialogAvatarImageView: UIKit.UIImageView!
  @objc @IBOutlet weak open var backgroundImageView: UIKit.UIImageView?
  @objc @IBOutlet weak open var userNameLabel: UIKit.UILabel!
  @objc @IBOutlet weak open var lastMessageLabel: AppFriendsUI.HCTopAlignedContentLabel!
  @objc @IBOutlet weak open var lastMessageTimeLabel: UIKit.UILabel!
  @objc @IBOutlet weak open var badgeView: UIKit.UIView!
  @objc override dynamic open func awakeFromNib()
  @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  open func hideBadge(_ hide: Swift.Bool)
  @objc override dynamic open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @available(iOS 3.0, *)
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol AFTokenInputViewDelegate {
  @objc optional func tokenInputViewDidEndEditing(_ view: AppFriendsUI.AFTokenInputView)
  @objc optional func tokenInputViewDidBeginEditing(_ view: AppFriendsUI.AFTokenInputView)
  @objc optional func tokenInputViewShouldReturn(_ view: AppFriendsUI.AFTokenInputView) -> Swift.Bool
  @objc optional func tokenInputView(_ view: AppFriendsUI.AFTokenInputView, didChangeText text: Swift.String?)
  @objc optional func tokenInputView(_ view: AppFriendsUI.AFTokenInputView, didAdd token: AppFriendsUI.AFToken)
  @objc optional func tokenInputView(_ view: AppFriendsUI.AFTokenInputView, didRemove token: AppFriendsUI.AFToken)
  @objc optional func tokenInputView(_ view: AppFriendsUI.AFTokenInputView, tokenForText text: Swift.String) -> AppFriendsUI.AFToken?
  @objc optional func tokenInputView(_ view: AppFriendsUI.AFTokenInputView, didChangeHeightTo height: CoreGraphics.CGFloat)
}
@objc open class AFTokenInputView : UIKit.UIView {
  weak open var delegate: AppFriendsUI.AFTokenInputViewDelegate?
  open var fieldName: Swift.String? {
    get
    set(newValue)
  }
  open var fieldColor: UIKit.UIColor {
    get
    set(newValue)
  }
  open var tokenizationCharacters: [Swift.String]
  open var allTokens: [AppFriendsUI.AFToken] {
    get
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open func tintColorDidChange()
  @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @objc deinit
}
@objc open class HCContactSelectField : AppFriendsUI.AFTokenInputView {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc open class HCDialogMemberCollectionViewCell : UIKit.UICollectionViewCell {
  @objc @IBOutlet weak open var userAvatar: UIKit.UIImageView!
  @objc @IBOutlet weak open var userNameLabel: UIKit.UILabel!
  @objc override dynamic open func awakeFromNib()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc open class HCChannelChatViewController : AppFriendsUI.HCBaseChatViewController {
  @objc override dynamic open func viewDidLoad()
  @objc deinit
  @objc override dynamic open func didReceiveMemoryWarning()
  @objc override open func rightBarButtonItem() -> UIKit.UIBarButtonItem?
  open func settingButtonTapped()
  @objc override open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc override dynamic open func fetchMoreMessages()
  override public init?(dialog: AppFriendsUI.AFDialog, supportedMessageDataTypes: AppFriendsUI.ChatSupportedMessageDataTypes? = super, requireReceipts: Swift.Bool = super, shouldAllowTagging: Swift.Bool = super)
  override public init?(dialogID: Swift.String, supportedMessageDataTypes: AppFriendsUI.ChatSupportedMessageDataTypes? = super, requireReceipts: Swift.Bool = super, shouldAllowTagging: Swift.Bool = super)
  @objc required dynamic public init(coder decoder: Foundation.NSCoder)
}
@objc open class HCDialogChatViewController : AppFriendsUI.HCBaseChatViewController, AppFriendsUI.HCGroupCreatorViewControllerDelegate {
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func didReceiveMemoryWarning()
  @objc override open func rightBarButtonItem() -> UIKit.UIBarButtonItem?
  @objc open func settingButtonTapped()
  @objc override public func emitEvent(_ event: AppFriendsUI.AFEvent)
  open func didLeaveDialog()
  @objc open func usersSelected(_ users: [Swift.String])
  @objc open func closeButtonTapped(_ selectVC: AppFriendsUI.HCGroupCreatorViewController)
  @objc override open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @objc override open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc override open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  override public func messagesDidChange()
  override public func insertMessage(message: AppFriendsUI.AFMessage, indexPath: Foundation.IndexPath)
  override public init?(dialog: AppFriendsUI.AFDialog, supportedMessageDataTypes: AppFriendsUI.ChatSupportedMessageDataTypes? = super, requireReceipts: Swift.Bool = super, shouldAllowTagging: Swift.Bool = super)
  override public init?(dialogID: Swift.String, supportedMessageDataTypes: AppFriendsUI.ChatSupportedMessageDataTypes? = super, requireReceipts: Swift.Bool = super, shouldAllowTagging: Swift.Bool = super)
  @objc required dynamic public init(coder decoder: Foundation.NSCoder)
  @objc deinit
}
@objc open class AFPushNotification : ObjectiveC.NSObject {
  @objc public static func registerDeviceForPushNotification(pushToken token: Swift.String, completion: ((Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func unregisterDeviceForPushNotification(completion: ((Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func processPushNotification(notificationUserInfo info: [Swift.AnyHashable : Any]) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc open class HCChatContentView : UIKit.UITextView {
  @objc override dynamic open func awakeFromNib()
  @available(iOS 7.0, *)
  @objc override dynamic public init(frame: CoreGraphics.CGRect, textContainer: UIKit.NSTextContainer?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc open class AFTypingIndicatorView : AppFriendsUI.AFBaseTypingIndicatorView {
  open var interval: Foundation.TimeInterval
  open var canResignByTouch: Swift.Bool
  open var textColor: UIKit.UIColor
  open var textFont: UIKit.UIFont
  open var highlightFont: UIKit.UIFont
  open var contentInset: UIKit.UIEdgeInsets {
    get
    set(newValue)
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  open func insertUsername(_ username: Swift.String?)
  open func removeUsername(_ username: Swift.String?)
  @objc override dynamic open var isVisible: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc override dynamic open func dismissIndicator()
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open var isHidden: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
}
@objc open class HCChatContainerViewController : AppFriendsUI.HCBaseViewController, AppFriendsUI.HCGroupCreatorViewControllerDelegate {
  weak open var _segmentView: AppFriendsUI.SMSegmentView!
  public init(tabs: [Swift.String])
  @objc required dynamic public init(coder decoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func didReceiveMemoryWarning()
  @objc open func close()
  @objc open func moreButtonTapped()
  open func addSegmentedControler()
  @objc open func switchTabs(_ segmentView: AppFriendsUI.SMSegmentView)
  open func displayChannelsList()
  open func displayDialogsList()
  open func displayContactsList()
  open func addVC(_ contentVC: UIKit.UIViewController)
  open func removeVC(_ contentVC: UIKit.UIViewController?)
  @objc open func usersSelected(_ users: [Swift.String])
  @objc open func closeButtonTapped(_ selectVC: AppFriendsUI.HCGroupCreatorViewController)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
@objc public protocol HCDialogsPickerViewControllerDelegate {
  @objc func didChooseDialog(_ dialog: AppFriendsUI.AFDialog)
}
@objc open class HCDialogsPickerViewController : AppFriendsUI.HCDialogsListViewController {
  weak open var delegate: AppFriendsUI.HCDialogsPickerViewControllerDelegate?
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func didReceiveMemoryWarning()
  @objc override open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public var kAFTextViewTextWillChangeNotification: Swift.String
public var kAFTextViewContentSizeDidChangeNotification: Swift.String
public var kAFTextViewSelectedRangeDidChangeNotification: Swift.String
public var kAFTextViewDidPasteItemNotification: Swift.String
public var kAFTextViewDidShakeNotification: Swift.String
public var kAFTextViewPastedItemContentType: Swift.String
public var kAFTextViewPastedItemMediaType: Swift.String
public var kAFTextViewPastedItemData: Swift.String
public var kAFTextViewGenericFormattingSelectorPrefix: Swift.String
public struct AFPastableMediaTypes : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static var none: AppFriendsUI.AFPastableMediaTypes
  public static var png: AppFriendsUI.AFPastableMediaTypes
  public static var jpeg: AppFriendsUI.AFPastableMediaTypes
  public static var tiff: AppFriendsUI.AFPastableMediaTypes
  public static var gif: AppFriendsUI.AFPastableMediaTypes
  public static var mov: AppFriendsUI.AFPastableMediaTypes
  public static var passbook: AppFriendsUI.AFPastableMediaTypes
  public static var images: AppFriendsUI.AFPastableMediaTypes
  public static var videos: AppFriendsUI.AFPastableMediaTypes
  public static var all: AppFriendsUI.AFPastableMediaTypes
  public typealias Element = AppFriendsUI.AFPastableMediaTypes
  public typealias ArrayLiteralElement = AppFriendsUI.AFPastableMediaTypes
  public typealias RawValue = Swift.Int
}
@objc open class AFTextView : UIKit.UITextView, AppFriendsUI.AFTextInput {
  weak open var textViewDelegate: AppFriendsUI.AFTextViewDelegate?
  open var placeholder: Swift.String! {
    get
    set(newValue)
  }
  open var placeholderColor: UIKit.UIColor {
    get
    set(newValue)
  }
  open var placeholderNumberOfLines: Swift.Int {
    get
    set(newValue)
  }
  open var placeholderFont: UIKit.UIFont! {
    get
    set(newValue)
  }
  open var maxNumberOfLines: Swift.Int {
    get
    set(newValue)
  }
  open var numberOfLines: Swift.Int {
    get
  }
  open var pastableMediaTypes: AppFriendsUI.AFPastableMediaTypes
  open var isExpanding: Swift.Bool {
    get
  }
  open var didNotResignFirstResponder: Swift.Bool
  open var isTrackpadEnabled: Swift.Bool
  open var isTypingSuggestionEnabled: Swift.Bool {
    get
    set(newValue)
  }
  open var isUndoManagerEnabled: Swift.Bool {
    get
    set(newValue)
  }
  open var isDynamicTypeEnabled: Swift.Bool {
    get
    set(newValue)
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect, textContainer: UIKit.NSTextContainer?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open class var requiresConstraintBasedLayout: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func layoutIfNeeded()
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open var selectedRange: Foundation.NSRange {
    @objc get
    @objc set(newValue)
  }
  @objc override dynamic open var selectedTextRange: UIKit.UITextRange? {
    @objc get
    @objc set(newValue)
  }
  @objc override dynamic open var text: Swift.String! {
    @objc get
    @objc set(newValue)
  }
  @objc override dynamic open var attributedText: Foundation.NSAttributedString! {
    @objc get
    @objc set(newValue)
  }
  @objc override dynamic open var font: UIKit.UIFont? {
    @objc get
    @objc set(newValue)
  }
  @objc override dynamic open var textAlignment: UIKit.NSTextAlignment {
    @objc get
    @objc set(newValue)
  }
  @objc override dynamic open var contentOffset: CoreGraphics.CGPoint {
    @objc get
    @objc set(newValue)
  }
  @available(iOS 9.0, *)
  @objc override dynamic open func beginFloatingCursor(at point: CoreGraphics.CGPoint)
  @available(iOS 9.0, *)
  @objc override dynamic open func endFloatingCursor()
  @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var canResignFirstResponder: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @objc override dynamic open func paste(_ sender: Any?)
  open func refreshFirstResponder()
  open func refreshInputViews()
  open func registerMarkdownFormattingSymbol(_ symbol: Swift.String, title: Swift.String)
  open var isFormattingEnabled: Swift.Bool {
    get
  }
  open var registeredSymbols: [Swift.String] {
    get
  }
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc override dynamic open func motionEnded(_ motion: UIKit.UIEvent.EventSubtype, with event: UIKit.UIEvent?)
  open func observeKeyInput(_ input: Swift.String, modifiers: UIKit.UIKeyModifierFlags, title: Swift.String?, completion: @escaping (UIKit.UIKeyCommand) -> Swift.Void)
  @objc override dynamic open var keyCommands: [UIKit.UIKeyCommand]? {
    @objc get
  }
  open func didPressArrowKey(keyCommand: UIKit.UIKeyCommand)
  @objc deinit
}
@objc public protocol AFTextViewDelegate : UIKit.UITextViewDelegate {
  @objc optional func textView(_ textView: AppFriendsUI.AFTextView, shouldOfferFormattingFor symbol: Swift.String) -> Swift.Bool
  @objc optional func textView(_ textView: AppFriendsUI.AFTextView, shouldInsertSuffixForFormattingWith symbol: Swift.String, prefixRange: Foundation.NSRange) -> Swift.Bool
}
public protocol AFTextInput : UIKit.UITextInput {
  func lookForPrefixes(_ prefixes: Swift.Set<Swift.String>, completion: (Swift.String?, Swift.String?, Foundation.NSRange) -> Swift.Void)
  func wordAtCaretRange(_ range: inout Foundation.NSRange) -> Swift.String?
  func wordAtRange(_ range: Foundation.NSRange, rangeInText: inout Foundation.NSRange) -> Swift.String?
}
extension AFTextInput {
  public func lookForPrefixes(_ prefixes: Swift.Set<Swift.String>, completion: (Swift.String?, Swift.String?, Foundation.NSRange) -> Swift.Void)
  public func wordAtCaretRange(_ range: inout Foundation.NSRange) -> Swift.String?
  @discardableResult
  public func wordAtRange(_ range: Foundation.NSRange, rangeInText: inout Foundation.NSRange) -> Swift.String?
}
extension UIView {
  public var badge: Swift.String? {
    get
    set(newValue)
  }
}
extension HCAlbumViewController : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForFooterInSection section: Swift.Int) -> CoreGraphics.CGSize
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForHeaderInSection section: Swift.Int) -> CoreGraphics.CGSize
}
public protocol HCLocationHistoryMonitorDelegate : AnyObject {
  func locationsWillChange()
  func locationsDidChange()
  func locationsWillRefresh()
  func locationsDidRefresh()
  func insertLocation(mapItem: MapKit.MKMapItem, indexPath: Foundation.IndexPath)
}
@objc open class AFUser : ObjectiveC.NSObject {
  @objc final public let id: Swift.String
  @objc final public let username: Swift.String
  @objc final public let avatarURL: Swift.String?
  @objc open var blocked: Swift.Bool {
    @objc get
  }
  @objc open var customData: Swift.String?
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc public static func search(query: Swift.String, completion: (([AppFriendsUI.AFUser]?, Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func getUser(userID id: Swift.String, completion: ((AppFriendsUI.AFUser?, Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func getFriends(completion: (([Swift.String]?, Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func getFollowers(completion: (([Swift.String]?, Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func getFollowing(completion: (([Swift.String]?, Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func followUser(userID id: Swift.String, completion: ((Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func unfollowUser(userID id: Swift.String, completion: ((Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func blockUser(userID id: Swift.String, completion: ((Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func unblockUser(userID id: Swift.String, completion: ((Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func getBlockedUsers(completion: (([Swift.String]?, Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func checkIfUserIsBlocked(_ userID: Swift.String, completion: ((Swift.Bool, Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func updateUserName(username: Swift.String, completion: ((Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func updateUserAvatar(avatar: Swift.String, completion: ((Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func updateUser(username: Swift.String?, avatar: Swift.String?, completion: ((Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func updateUserCustomData(customData: Swift.String, completion: ((Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func currentUser() -> AppFriendsUI.AFUser?
  @objc override dynamic public init()
  @objc deinit
}
@objc open class SMSegmentView : UIKit.UIControl {
  open var segmentAppearance: AppFriendsUI.SMSegmentAppearance?
  open var dividerColour: UIKit.UIColor {
    get
    set(newValue)
  }
  open var dividerWidth: CoreGraphics.CGFloat {
    get
    set(newValue)
  }
  open var selectedSegmentIndex: Swift.Int {
    get
    set(newIndex)
  }
  open var organiseMode: AppFriendsUI.SMSegmentOrganiseMode {
    get
    set(newValue)
  }
  open var numberOfSegments: Swift.Int {
    get
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  public init(frame: CoreGraphics.CGRect, dividerColour: UIKit.UIColor, dividerWidth: CoreGraphics.CGFloat, segmentAppearance: AppFriendsUI.SMSegmentAppearance)
  open func addSegmentWithTitle(_ title: Swift.String?, onSelectionImage: UIKit.UIImage?, offSelectionImage: UIKit.UIImage?)
  open func insertSegmentWithTitle(_ title: Swift.String?, onSelectionImage: UIKit.UIImage?, offSelectionImage: UIKit.UIImage?, index: Swift.Int)
  open func removeSegmentAtIndex(_ index: Swift.Int)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @objc deinit
}
public var kAFKeyboardWillShowNotification: Swift.String
public var kAFKeyboardDidShowNotification: Swift.String
public var kAFKeyboardWillHideNotification: Swift.String
public var kAFKeyboardDidHideNotification: Swift.String
public enum AFKeyboardStatus {
  case none
  case didHide
  case willShow
  case didShow
  case willHide
  public static func == (a: AppFriendsUI.AFKeyboardStatus, b: AppFriendsUI.AFKeyboardStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc open class AFTextViewController : UIKit.UIViewController {
  open var tableView: UIKit.UITableView! {
    get
    }
  open var collectionView: UIKit.UICollectionView? {
    get
    }
  open var scrollView: UIKit.UIScrollView? {
    get
    }
  open var textInputbar: AppFriendsUI.AFTextInputbar {
    get
  }
  open var typingIndicatorView: AppFriendsUI.AFTypingIndicatorView? {
    get
  }
  open var typingIndicatorProxyView: AppFriendsUI.AFBaseTypingIndicatorView {
    get
  }
  open var singleTapGesture: UIKit.UIGestureRecognizer! {
    get
    }
  open var verticalPanGesture: UIKit.UIPanGestureRecognizer! {
    get
    }
  open var bounces: Swift.Bool {
    get
    set(newValue)
  }
  open var shakeToClearEnabled: Swift.Bool
  open var isKeyboardPanningEnabled: Swift.Bool
  open var isExternalKeyboardDetected: Swift.Bool {
    get
    }
  open var isKeyboardUndocked: Swift.Bool {
    get
    }
  open var shouldClearTextAtRightButtonPress: Swift.Bool
  open var shouldScrollToBottomAfterKeyboardShows: Swift.Bool
  open var isInverted: Swift.Bool {
    get
    set(newValue)
  }
  open var isPresentedInPopover: Swift.Bool {
    get
    set(newValue)
  }
  open var keyboardStatus: AppFriendsUI.AFKeyboardStatus {
    get
    }
  open var textView: AppFriendsUI.AFTextView {
    get
  }
  open var leftButton: UIKit.UIButton {
    get
  }
  open var rightButton: UIKit.UIButton {
    get
  }
  open func presentKeyboard(animated: Swift.Bool)
  open func dismissKeyboard(animated: Swift.Bool)
  open func forceTextInputbarAdjustment(for responder: UIKit.UIResponder?) -> Swift.Bool
  open func ignoreTextInputbarAdjustment() -> Swift.Bool
  open func didChangeKeyboardStatus(_ status: AppFriendsUI.AFKeyboardStatus)
  open func textWillUpdate()
  open func textDidUpdate(animated: Swift.Bool)
  open func textSelectionDidChange()
  @objc open func didPressLeftButton(_ sender: Any?)
  @objc open func didPressRightButton(_ sender: Any?)
  open func canPressRightButton() -> Swift.Bool
  open func didPasteMediaContent(userInfo: [Swift.AnyHashable : Any])
  open func canShowTypingIndicator() -> Swift.Bool
  open func willRequestUndo()
  open func didPressReturnKey(keyCommand: UIKit.UIKeyCommand?)
  open func didPressEscapeKey(keyCommand: UIKit.UIKeyCommand?)
  open func didPressArrowKey(keyCommand: UIKit.UIKeyCommand?)
  open var isTextInputbarHidden: Swift.Bool {
    get
    set(newValue)
  }
  open func setTextInputbarHidden(_ hidden: Swift.Bool, animated: Swift.Bool)
  open func editText(_ text: Swift.String)
  open func editAttributedText(_ attributedText: Foundation.NSAttributedString)
  @objc open func didCommitTextEditing(sender: Any)
  @objc open func didCancelTextEditing(sender: Any)
  open var autoCompletionView: UIKit.UITableView {
    get
  }
  open var isAutoCompleting: Swift.Bool {
    get
  }
  open var foundPrefix: Swift.String?
  open var foundPrefixRange: Foundation.NSRange
  open var foundWord: Swift.String?
  open var registeredPrefixes: Swift.Set<Swift.String> {
    get
    }
  open func registerPrefixesForAutoCompletion(prefixes: [Swift.String]?)
  open func shouldProcessTextForAutoCompletion() -> Swift.Bool
  open func shouldDisableTypingSuggestionForAutoCompletion() -> Swift.Bool
  open func didChangeAutoCompletion(prefix: Swift.String, word: Swift.String)
  open func showAutoCompletionView(_ show: Swift.Bool)
  open func showAutoCompletionView(prefix: Swift.String, word: Swift.String, prefixRange: Foundation.NSRange)
  open func heightForAutoCompletionView() -> CoreGraphics.CGFloat
  open func maximumHeightForAutoCompletionView() -> CoreGraphics.CGFloat
  open func cancelAutoCompletion()
  open func acceptAutoCompletion(with string: Swift.String?)
  open func acceptAutoCompletion(with string: Swift.String?, keepPrefix: Swift.Bool)
  open func keyForTextCaching() -> Swift.String?
  open func clearCachedText()
  public static func clearAllCachedText()
  @objc open func cacheTextView()
  open func registerClassForTextView(aClass: AppFriendsUI.AFTextView.Type)
  open func registerClassForTypingIndicatorView(aClass: AppFriendsUI.AFBaseTypingIndicatorView.Type)
  public init(tableViewStyle: UIKit.UITableView.Style)
  public init(collectionViewLayout: UIKit.UICollectionViewLayout)
  public init(scrollView: UIKit.UIScrollView)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillLayoutSubviews()
  @objc override dynamic open func viewDidLayoutSubviews()
  open class func tableViewStyle(for decoder: Foundation.NSCoder) -> UIKit.UITableView.Style
  public static func collectionViewLayout(for decoder: Foundation.NSCoder) -> UIKit.UICollectionViewLayout?
  @objc override dynamic open var modalPresentationStyle: UIKit.UIModalPresentationStyle {
    @objc get
    @objc set(newValue)
  }
  @objc override dynamic open var edgesForExtendedLayout: UIKit.UIRectEdge {
    @objc get
    @objc set(newValue)
  }
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc override dynamic open var keyCommands: [UIKit.UIKeyCommand]? {
    @objc get
  }
  @available(iOS 8, *)
  @objc override dynamic open func willTransition(to newCollection: UIKit.UITraitCollection, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @available(iOS 8, *)
  @objc override dynamic open func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc override dynamic open func willRotate(to toInterfaceOrientation: UIKit.UIInterfaceOrientation, duration: Foundation.TimeInterval)
  @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func didReceiveMemoryWarning()
  @objc deinit
}
extension AFTextViewController : UIKit.UITableViewDataSource {
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension AFTextViewController : UIKit.UITableViewDelegate {
  @objc dynamic open func scrollViewShouldScrollToTop(_ scrollView: UIKit.UIScrollView) -> Swift.Bool
  @objc dynamic open func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @objc dynamic open func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
extension AFTextViewController : UIKit.UICollectionViewDataSource {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension AFTextViewController : UIKit.UICollectionViewDelegate {
}
extension AFTextViewController : UIKit.UITextViewDelegate {
  @objc dynamic open func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @objc dynamic open func textViewDidChange(_ textView: UIKit.UITextView)
  @objc dynamic open func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @objc dynamic open func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @objc dynamic open func textViewShouldEndEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @objc dynamic open func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @objc dynamic open func textViewDidEndEditing(_ textView: UIKit.UITextView)
}
extension AFTextViewController : AppFriendsUI.AFTextViewDelegate {
  @objc dynamic open func textView(_ textView: AppFriendsUI.AFTextView, shouldOfferFormattingFor symbol: Swift.String) -> Swift.Bool
  @objc dynamic open func textView(_ textView: AppFriendsUI.AFTextView, shouldInsertSuffixForFormattingWith symbol: Swift.String, prefixRange: Foundation.NSRange) -> Swift.Bool
}
extension AFTextViewController : UIKit.UIGestureRecognizerDelegate {
  @objc dynamic open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
@objc open class AFInputAccessoryView : UIKit.UIView {
  @objc override dynamic open func willMove(toSuperview newSuperview: UIKit.UIView?)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc open class AppFriendsUI : ObjectiveC.NSObject {
  @objc public static var sharedInstance: AppFriendsUI.AppFriendsUI
  @objc open func initialize(_ appKey: Swift.String, secret: Swift.String, completion: ((Swift.Bool, Foundation.NSError?) -> Swift.Void)? = nil)
  @objc open func initialized() -> Swift.Bool
  @objc open func presentVCInSidePanel(fromVC: UIKit.UIViewController, showVC: UIKit.UIViewController, backgroundMode: AppFriendsUI.HCSidePanelBackgroundMode = .normal) -> AppFriendsUI.HCSidePanelViewController
  @objc override dynamic public init()
  @objc deinit
}
@objc open class HCImageModalViewController : AppFriendsUI.HCBaseViewController, UIKit.UIScrollViewDelegate {
  @objc @IBOutlet weak open var imageView: UIKit.UIImageView!
  @objc @IBOutlet weak open var scrollView: UIKit.UIScrollView!
  final public let closeButton: UIKit.UIButton
  final public let shareButton: UIKit.UIButton
  final public let albumButton: UIKit.UIButton
  public init(url: Swift.String, showAlbumButton show: Swift.Bool = true, dialog: AppFriendsUI.AFDialog? = nil, useAFRequest: Swift.Bool? = false)
  @objc required dynamic public init(coder decoder: Foundation.NSCoder)
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func didReceiveMemoryWarning()
  open func rightBarButtonItem() -> UIKit.UIBarButtonItem
  open func leftBarButtonItem() -> UIKit.UIBarButtonItem?
  @objc open func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @objc open func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreGraphics.CGFloat)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
public enum AFCounterStyle {
  case none
  case split
  case countdown
  case countdownReversed
  public static func == (a: AppFriendsUI.AFCounterStyle, b: AppFriendsUI.AFCounterStyle) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum AFCounterPosition {
  case top
  case bottom
  public static func == (a: AppFriendsUI.AFCounterPosition, b: AppFriendsUI.AFCounterPosition) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public var kAFTextInputbarDidMoveNotification: Swift.String
@objc open class AFTextInputbar : UIKit.UIToolbar {
  open var textView: AppFriendsUI.AFTextView {
    get
    set(value)
  }
  open var contentView: UIKit.UIView {
    get
    set(value)
  }
  @objc override dynamic open var inputAccessoryView: AppFriendsUI.AFInputAccessoryView? {
    @objc get
  }
  open var leftButton: UIKit.UIButton {
    get
    set(value)
  }
  open var rightButton: UIKit.UIButton {
    get
    set(value)
  }
  open var autoHideRightButton: Swift.Bool {
    get
    set(newValue)
  }
  open var bounces: Swift.Bool
  open var contentInset: UIKit.UIEdgeInsets {
    get
    set(newValue)
  }
  open var minimumInputbarHeight: CoreGraphics.CGFloat {
    get
  }
  open var appropriateHeight: CoreGraphics.CGFloat {
    get
  }
  open var editorContentView: UIKit.UIView!
  open var editorTitle: UIKit.UILabel {
    get
    set(value)
  }
  open var editorLeftButton: UIKit.UIButton {
    get
    set(value)
  }
  open var editorRightButton: UIKit.UIButton {
    get
    set(value)
  }
  open var editorContentViewHeight: CoreGraphics.CGFloat
  open var isEditing: Swift.Bool {
    get
    set(newValue)
  }
  open var charCountLabel: UIKit.UILabel {
    get
    set(value)
  }
  open var maxCharCount: Swift.UInt
  open var counterStyle: AppFriendsUI.AFCounterStyle
  open var counterPosition: AppFriendsUI.AFCounterPosition {
    get
    set(newValue)
  }
  open var limitExceeded: Swift.Bool {
    get
  }
  open var charCountLabelNormalColor: UIKit.UIColor
  open var charCountLabelWarningColor: UIKit.UIColor
  public init(textViewClass: AppFriendsUI.AFTextView.Type?)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutIfNeeded()
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open class var requiresConstraintBasedLayout: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set(newValue)
  }
  @objc override dynamic open var isHidden: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  open func canEditText(_ text: Swift.String) -> Swift.Bool
  open func beginTextEditing()
  open func endTextEdition()
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
}
open class HCMediaInputItem {
  final public let mediaIdentifier: Swift.String
  final public let iconImage: UIKit.UIImage
  @objc deinit
}
@objc open class AFAlbumItem : ObjectiveC.NSObject {
  @objc final public let id: Swift.String
  @objc final public let dialogID: Swift.String
  @objc final public let time: Foundation.Date
  @objc final public let type: Swift.String
  @objc final public let thumbnailURL: Swift.String
  @objc final public let url: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc open class AFAlbum : ObjectiveC.NSObject {
  @objc public static func getAllAlbumItems(fromDialog id: Swift.String, startingFrom time: Foundation.Date?, completion: (([AppFriendsUI.AFAlbumItem]?, Foundation.NSError?) -> Swift.Void)? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@objc open class HCGifItem : ObjectiveC.NSObject {
  open var smallSizeUrl: Swift.String?
  open var url: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc open class BlockSwipe : UIKit.UISwipeGestureRecognizer {
  @objc open func didSwipe(_ swipe: UIKit.UISwipeGestureRecognizer)
  @objc deinit
}
@objc open class AFSession : ObjectiveC.NSObject {
  @objc public static func login(username name: Swift.String, userID id: Swift.String, completion: ((Swift.String?, Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func logout(complete completion: ((Foundation.NSError?) -> Swift.Void)? = nil)
  @objc public static func isLoggedIn() -> Swift.Bool
  @objc public static func currentUserID() -> Swift.String?
  @objc public static func currentUserName() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public struct SMSegmentedControlKeys {
}
public enum SMSegmentOrganiseMode : Swift.Int {
  case horizontal
  case vertical
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol HCChatTableViewCellDelegate {
  @objc func attachmentTapped(inCell cell: AppFriendsUI.HCChatTableViewCell)
  @objc func avatarTapped(inCell cell: AppFriendsUI.HCChatTableViewCell)
  @objc func failedButtonTapped(inCell cell: AppFriendsUI.HCChatTableViewCell)
  @objc func linkTapped(inCell cell: AppFriendsUI.HCChatTableViewCell, url: Foundation.URL)
  @objc func reportButtonTapped(inCell cell: AppFriendsUI.HCChatTableViewCell)
}
@objc open class HCChatTableViewCell : UIKit.UITableViewCell, UIKit.UITextViewDelegate {
  @objc @IBOutlet weak open var messageWidthConstraint: UIKit.NSLayoutConstraint?
  @objc @IBOutlet open var messageLeadingConstraint: UIKit.NSLayoutConstraint?
  @objc @IBOutlet open var messageTrailingConstraint: UIKit.NSLayoutConstraint?
  @objc @IBOutlet weak open var userNameHeightConstraint: UIKit.NSLayoutConstraint?
  @objc @IBOutlet weak open var userNameLabel: UIKit.UILabel?
  @objc @IBOutlet weak open var messageContentLabel: AppFriendsUI.HCChatContentView?
  @objc @IBOutlet weak open var seenByLabel: UIKit.UILabel?
  @objc @IBOutlet weak open var dateLabel: UIKit.UILabel?
  @objc @IBOutlet weak open var timeLabel: UIKit.UILabel?
  @objc @IBOutlet weak open var userAvatarImageView: UIKit.UIImageView?
  @objc @IBOutlet weak open var contentImageView: UIKit.UIImageView?
  @objc @IBOutlet weak open var failedButton: UIKit.UIButton?
  @objc @IBOutlet weak open var videoPlayIcon: UIKit.UILabel?
  weak open var delegate: AppFriendsUI.HCChatTableViewCellDelegate?
  open var messageTime: Foundation.Date?
  open var isSentMessageCell: Swift.Bool
  @objc override dynamic open func awakeFromNib()
  open func updateTime()
  @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc open func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange) -> Swift.Bool
  @available(iOS 3.0, *)
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc open class HCContactTableViewCell : UIKit.UITableViewCell {
  @objc override dynamic open func awakeFromNib()
  @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @available(iOS 3.0, *)
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum AFAttachmentType : Swift.Int {
  case image = 0
  case video = 1
  case gif = 2
  case location = 3
  case gameScore = 4
  public func toString() -> Swift.String
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc open class AFAttachment : ObjectiveC.NSObject {
  @objc final public let type: AppFriendsUI.AFAttachmentType
  public init(type: AppFriendsUI.AFAttachmentType)
  @objc override dynamic public init()
  @objc deinit
}
@objc open class AFImageAttachment : AppFriendsUI.AFAttachment {
  @objc final public let fullSizeURL: Swift.String
  @objc final public let thumbnailURL: Swift.String
  public init(fullSizeURL: Swift.String, thumbnailURL: Swift.String?)
  override public init(type: AppFriendsUI.AFAttachmentType)
  @objc deinit
}
@objc open class AFVideoAttachment : AppFriendsUI.AFAttachment {
  @objc final public let streamingURL: Swift.String
  @objc final public let thumbnailURL: Swift.String
  public init(streamingURL: Swift.String, thumbnailURL: Swift.String?)
  override public init(type: AppFriendsUI.AFAttachmentType)
  @objc deinit
}
@objc open class AFGifAttachment : AppFriendsUI.AFAttachment {
  @objc final public let url: Swift.String
  public init(url: Swift.String)
  override public init(type: AppFriendsUI.AFAttachmentType)
  @objc deinit
}
@objc open class AFLocationAttachment : AppFriendsUI.AFAttachment {
  @objc final public let mapItem: MapKit.MKMapItem
  @objc final public let title: Swift.String
  @objc final public let subtitle: Swift.String
  public init(mapItem: MapKit.MKMapItem, title: Swift.String, subtitle: Swift.String)
  override public init(type: AppFriendsUI.AFAttachmentType)
  @objc deinit
}
@objc open class AFGameScoreAttachment : AppFriendsUI.AFAttachment {
  @objc final public let gameId: Swift.String
  @objc final public let homeTeamId: Swift.String
  @objc final public let awayTeamId: Swift.String
  @objc final public let homeTeamScore: Swift.String
  @objc final public let awayTeamScore: Swift.String
  @objc final public let homeTeamLogo: Swift.String
  @objc final public let awayTeamLogo: Swift.String
  public init(gameId: Swift.String, homeTeamId: Swift.String, awayTeamId: Swift.String, homeTeamScore: Swift.String, awayTeamScore: Swift.String, homeTeamLogo: Swift.String, awayTeamLogo: Swift.String)
  override public init(type: AppFriendsUI.AFAttachmentType)
  @objc deinit
}
@objc public protocol HCSidePanelViewControllerDelegate {
  @objc optional func sidePanelWillAppear(panel: AppFriendsUI.HCSidePanelViewController)
  @objc optional func sidePanelDidAppear(panel: AppFriendsUI.HCSidePanelViewController)
  @objc optional func sidePanelWillDisappear(panel: AppFriendsUI.HCSidePanelViewController)
  @objc optional func sidePanelDidDisappear(panel: AppFriendsUI.HCSidePanelViewController)
}
@objc public enum HCSidePanelBackgroundMode : Swift.Int {
  case normal = 0
  case darken = 1
  case blur = 2
  case darkBlur = 3
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc open class HCSidePanelViewController : UIKit.UIViewController {
  open var backgroundMode: AppFriendsUI.HCSidePanelBackgroundMode
  weak open var delegate: AppFriendsUI.HCSidePanelViewControllerDelegate?
  public init(animator: AppFriendsUI.HCSidePanelAnimator, contentVC: UIKit.UIViewController)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func didReceiveMemoryWarning()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
@objc public protocol HCOnlineUsersBannerControllerDelegate {
  @objc func userSelected(_ userID: Swift.String)
}
@objc open class HCOnlineUsersBannerController : UIKit.UICollectionViewController, AppFriendsCore.HCSDKCoreOnlineUserObserver {
  weak open var delegate: AppFriendsUI.HCOnlineUsersBannerControllerDelegate?
  @objc required dynamic public convenience init(coder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func didReceiveMemoryWarning()
  @objc override dynamic open func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc override dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc override dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc override dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionReusableView
  @objc override dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc public func onlineUserCountChanged(count: ObjectiveC.NSInteger)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
@objc open class SMSegment : UIKit.UIView {
  open var title: Swift.String? {
    get
    set(newValue)
  }
  open var onSelectionImage: UIKit.UIImage?
  open var offSelectionImage: UIKit.UIImage?
  open var appearance: AppFriendsUI.SMSegmentAppearance?
  open var index: Swift.Int {
    get
    }
  open var isSelected: Swift.Bool {
    get
    }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
@objc open class BlockPinch : UIKit.UIPinchGestureRecognizer {
  @objc open func didPinch(_ pinch: UIKit.UIPinchGestureRecognizer)
  @objc deinit
}
@objc open class HCBaseViewController : UIKit.UIViewController {
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func didReceiveMemoryWarning()
  open func showProgress(_ progress: Swift.Float, message: Swift.String)
  open func showLoading(_ message: Swift.String?)
  open func showErrorWithMessage(_ message: Swift.String?)
  open func showSuccessWithMessage(_ message: Swift.String?)
  open func hideHUD()
  @objc deinit
}
@objc open class HCColorPalette : ObjectiveC.NSObject {
  @objc public static var chatBackgroundColor: UIKit.UIColor
  @objc public static var chatDialogCellBackgroundColor: UIKit.UIColor
  @objc public static var chatMessageCellBackgroundColor: UIKit.UIColor
  @objc public static var chatOutMessageContentTextColor: UIKit.UIColor
  @objc public static var chatInMessageContentTextColor: UIKit.UIColor
  @objc public static var chatUserNamelTextColor: UIKit.UIColor
  @objc public static var chatTimeLabelTextColor: UIKit.UIColor
  @objc public static var chatDateLabelTextColor: UIKit.UIColor
  @objc public static var chatSystemMessageColor: UIKit.UIColor
  @objc public static var chatSendButtonColor: UIKit.UIColor?
  @objc public static var chatOutMessageBubbleColor: UIKit.UIColor
  @objc public static var chatInMessageBubbleColor: UIKit.UIColor
  @objc public static var chatMessageFailedButtonColor: UIKit.UIColor?
  @objc public static var chatVideoPlayIconColor: UIKit.UIColor
  @objc public static var chatLeaveConversationColor: UIKit.UIColor?
  @objc public static var chatDialogListSectionTitleColor: UIKit.UIColor?
  @objc public static var chatDialogListSectionBgColor: UIKit.UIColor?
  @objc public static var chatDialogListTitleColor: UIKit.UIColor
  @objc public static var chatDialogTimeStampPreviewColor: UIKit.UIColor
  @objc public static var chatDialogMessagePreviewColor: UIKit.UIColor
  @objc public static var chatNewMessageDividerColor: UIKit.UIColor?
  @objc public static var chatInMessageLinkColor: UIKit.UIColor?
  @objc public static var chatOutMessageLinkColor: UIKit.UIColor?
  @objc public static var chatAttachmentIconColor: UIKit.UIColor?
  @objc public static var chatMediaMessageButtonColor: UIKit.UIColor?
  @objc public static var chatMediaMessageButtonBgColor: UIKit.UIColor?
  @objc public static var chatMediaMessageButtonBorderColor: UIKit.UIColor?
  @objc public static var chatMediaMessageSelectionPanelColor: UIKit.UIColor?
  @objc public static var channelChatBannerColor: UIKit.UIColor?
  @objc public static var onlineUsersLabelColor: UIKit.UIColor
  @objc public static var onlineUserIndicatorColor: UIKit.UIColor
  @objc public static var avatarBackgroundColor: UIKit.UIColor?
  @objc public static var avatarColor: UIKit.UIColor
  @objc public static var reportButtonTitleColor: UIKit.UIColor?
  @objc public static var reportButtonBorderColor: UIKit.UIColor?
  @objc public static var segmentSelectorColor: UIKit.UIColor
  @objc public static var segmentSelectorOnBgColor: UIKit.UIColor?
  @objc public static var segmentSelectorOffBgColor: UIKit.UIColor
  @objc public static var segmentSelectorOnTextColor: UIKit.UIColor
  @objc public static var segmentSelectorOffTextColor: UIKit.UIColor
  @objc public static var tableSeparatorColor: UIKit.UIColor?
  @objc public static var tableBackgroundColor: UIKit.UIColor?
  @objc public static var tableSectionSeparatorColor: UIKit.UIColor?
  @objc public static var navigationBarIconColor: UIKit.UIColor
  @objc public static var navigationBarTitleColor: UIKit.UIColor
  @objc public static var badgeBackgroundColor: UIKit.UIColor?
  @objc public static var closeButtonBgColor: UIKit.UIColor
  @objc public static var closeButtonIconColor: UIKit.UIColor
  @objc public static var searchBarTintColor: UIKit.UIColor?
  @objc public static var emptyTableLabelColor: UIKit.UIColor
  @objc public static var normalTextColor: UIKit.UIColor
  @objc public static var placeholderTextColor: UIKit.UIColor?
  @objc public static var albumBackgroundColor: UIKit.UIColor?
  @objc public static var albumSectionBackgroundColor: UIKit.UIColor?
  @objc public static var albumSectionTitleColor: UIKit.UIColor?
  @objc public static var albumItemBackgroundColor: UIKit.UIColor?
  @objc public static var albumNavigationBarIconColor: UIKit.UIColor?
  @objc public static var albumNavigationBarTitleColor: UIKit.UIColor?
  @objc public static var albumNavigationBackgroundColor: UIKit.UIColor?
  @objc public static var albumStatusBarStyle: UIKit.UIStatusBarStyle
  @objc override dynamic public init()
  @objc deinit
}
@objc open class HCSize : ObjectiveC.NSObject {
  @objc public static var chatCellContentDefaultPointSize: CoreGraphics.CGFloat
  @objc public static var chatCellContentBubbleCornerRadius: CoreGraphics.CGFloat
  @objc public static var chatCellUserNameLabelHeight: CoreGraphics.CGFloat
  @objc public static var chatDialogListSectionHeight: CoreGraphics.CGFloat
  @objc public static var chatUserNameLeftMargin: CoreGraphics.CGFloat
  @objc public static var sidePanelWindowWidth: CoreGraphics.CGFloat
  @objc public static var albumDividerWidth: CoreGraphics.CGFloat
  @objc public static var albumSectionHeight: CoreGraphics.CGFloat
  @objc override dynamic public init()
  @objc deinit
}
@objc open class HCFont : ObjectiveC.NSObject {
  @objc public static var segmentSelectorFont: UIKit.UIFont
  @objc public static var chatCellContentFont: UIKit.UIFont
  @objc public static var chatCellSystemMessageFont: UIKit.UIFont
  @objc public static var boldButtonFont: UIKit.UIFont
  @objc public static var dialogSettingFont: UIKit.UIFont
  @objc public static var navigationBarTitleFont: UIKit.UIFont
  @objc public static var chatTimestampFont: UIKit.UIFont
  @objc public static var chatDateLabelFont: UIKit.UIFont
  @objc public static var chatUserNameFont: UIKit.UIFont
  @objc public static var locationTitleFont: UIKit.UIFont
  @objc public static var locationSubtitleFont: UIKit.UIFont
  @objc public static var emptyTableLabelFont: UIKit.UIFont
  @objc public static var albumSectionTitleFont: UIKit.UIFont
  @objc public static var chatDialogListSectionTitleFont: UIKit.UIFont
  @objc public static var chatDialogListCellTitleFont: UIKit.UIFont
  @objc public static var chatDialogListCellTimestampFont: UIKit.UIFont
  @objc public static var chatDialogListCellLastMessageFont: UIKit.UIFont
  @objc override dynamic public init()
  @objc deinit
}
@objc open class HCConstants : ObjectiveC.NSObject {
  @objc public static var sidePanelSlideAnimationDuration: Swift.Double
  @objc public static var maxMessageLength: Swift.UInt
  @objc public static var timeIntervalForMessageDateLabelDisplay: Foundation.TimeInterval
  @objc override dynamic public init()
  @objc deinit
}
@objc open class HCStringValues : ObjectiveC.NSObject {
  @objc public static var channelTabTitle: Swift.String
  @objc public static var dialogsTabTitle: Swift.String
  @objc public static var contactsTabTitle: Swift.String
  @objc public static var videoSizeOverError: Swift.String
  @objc public static var seenByLabelText: Swift.String
  @objc public static var dialogsListChannelsSectionTitle: Swift.String
  @objc public static var dialogsListDialogsSectionTitle: Swift.String
  @objc public static var recentHistory: Swift.String
  @objc public static var currentLocation: Swift.String
  @objc public static var noSearchHistory: Swift.String
  @objc public static var locationTitleDefault: Swift.String
  @objc public static var albumViewtitle: Swift.String
  @objc public static var reportButtonTitle: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc open class HCSettingsConfiguation : ObjectiveC.NSObject {
  @objc public static var badgeDisplayIfMuted: Swift.Bool
  @objc public static var showNewMessageLine: Swift.Bool
  public static var supportedMessageTypes: AppFriendsUI.ChatSupportedMessageDataTypes
  @objc public static var messagePushNotificationEnabled: Swift.Bool
  @objc public static var gifContentRating: AppFriendsUI.AFGifContentRating
  @objc public static var gifContentType: AppFriendsUI.AFGifContentType
  @objc public static var showDialogAlbum: Swift.Bool
  @objc public static var enableContentFlagging: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc open class HCChannelsListViewController : AppFriendsUI.HCBaseViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func didReceiveMemoryWarning()
  @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
open class SMSegmentAppearance {
  open var segmentOnSelectionColour: UIKit.UIColor
  open var segmentOffSelectionColour: UIKit.UIColor
  open var segmentTouchDownColour: UIKit.UIColor {
    get
  }
  open var titleOnSelectionColour: UIKit.UIColor
  open var titleOffSelectionColour: UIKit.UIColor
  open var titleOnSelectionFont: UIKit.UIFont
  open var titleOffSelectionFont: UIKit.UIFont
  open var contentVerticalMargin: CoreGraphics.CGFloat
  @objc deinit
}
@objc open class HCAlbumViewController : AppFriendsUI.HCBaseViewController {
  final public let closeButton: UIKit.UIButton
  open var albumCollectionView: UIKit.UICollectionView?
  public init(dialogID: Swift.String)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  open func leftBarButtonItem() -> UIKit.UIBarButtonItem?
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
@objc open class HCDialogsListViewController : AppFriendsUI.HCBaseViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource, AppFriendsUI.DialogListMonitorDelegate, UIKit.UIGestureRecognizerDelegate {
  @objc @IBOutlet weak open var tableView: UIKit.UITableView!
  @objc open var includeChannels: Swift.Bool
  @objc deinit
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func didReceiveMemoryWarning()
  @objc open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  open func dialog(atIndexPath indexPath: Foundation.IndexPath) -> AppFriendsUI.AFDialog?
  @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @objc public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc public func tableView(_ tableView: UIKit.UITableView, canEditRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc public func tableView(_ tableView: UIKit.UITableView, editActionsForRowAt indexPath: Foundation.IndexPath) -> [UIKit.UITableViewRowAction]?
  open func fillAvatar(atIndexPath indexPath: Foundation.IndexPath, avatarImageView: UIKit.UIImageView)
  open func dialogCell(atIndexPath indexPath: Foundation.IndexPath) -> AppFriendsUI.HCDialogTableViewCell
  open func dialogsListWillChange()
  open func dialogsListDidChange()
  open func dialogsListWillRefresh()
  open func dialogsListDidRefresh()
  open func insertDialog(dialog: AppFriendsUI.AFDialog, indexPath: Foundation.IndexPath)
  open func removeDialog(dialog: AppFriendsUI.AFDialog, indexPath: Foundation.IndexPath)
  open func updateDialog(dialog: AppFriendsUI.AFDialog, indexPath: Foundation.IndexPath)
  open func reorderDialog(dialog: AppFriendsUI.AFDialog, fromIndexPath: Foundation.IndexPath, toIndexPath: Foundation.IndexPath)
  open func insertSection(indexSec: Foundation.IndexSet)
  open func deleteSection(indexSec: Foundation.IndexSet)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
@objc extension HCBaseChatViewController {
  @objc dynamic open func showProgress(_ progress: Swift.Float, message: Swift.String)
  @objc dynamic open func showLoading(_ message: Swift.String?)
  @objc dynamic open func showErrorWithMessage(_ message: Swift.String?)
  @objc dynamic open func showSuccessWithMessage(_ message: Swift.String?)
  @objc dynamic open func hideHUD()
}
public protocol HCChatTableHandlerDelegate : AnyObject {
  func messagesWillChange()
  func messagesDidChange()
  func messagesWillRefresh()
  func messagesDidRefresh()
  func insertMessage(message: AppFriendsUI.AFMessage, indexPath: Foundation.IndexPath)
}
@objc open class AFToken : ObjectiveC.NSObject {
  open var displayText: Swift.String
  open var context: Swift.AnyObject?
  public init(displayText: Swift.String, context: Swift.AnyObject?)
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic open var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc open class HCChannelChatContainerController : AppFriendsUI.HCBaseViewController, AppFriendsUI.HCOnlineUsersBannerControllerDelegate, UIKit.UIGestureRecognizerDelegate {
  open var chatVC: AppFriendsUI.HCChannelChatViewController?
  open var onlineUserHeaderVC: AppFriendsUI.HCOnlineUsersBannerController?
  open var _dialogID: Swift.String
  @objc deinit
  @objc public convenience init(dialogID: Swift.String)
  public init(dialog: AppFriendsUI.AFDialog, supportedMessageDataTypes: AppFriendsUI.ChatSupportedMessageDataTypes? = .gif)
  public init(dialogID: Swift.String, supportedMessageDataTypes: AppFriendsUI.ChatSupportedMessageDataTypes? = .gif)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func didReceiveMemoryWarning()
  @objc public func userSelected(_ userID: Swift.String)
  override open func updateTitle()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
@objc open class HCChannelTableViewCell : UIKit.UITableViewCell {
  @objc override dynamic open func awakeFromNib()
  @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @available(iOS 3.0, *)
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public var af_IsLandscape: Swift.Bool {
  get
}
public var af_IsIpad: Swift.Bool {
  get
}
public var af_IsIphone: Swift.Bool {
  get
}
public var af_IsIphone4: Swift.Bool {
  get
}
public var af_IsIphone5: Swift.Bool {
  get
}
public var af_IsIphone6: Swift.Bool {
  get
}
public var af_IsIphone6Plus: Swift.Bool {
  get
}
public var af_IsIOS8AndHigh: Swift.Bool {
  get
}
public var af_IsIOS9AndHigh: Swift.Bool {
  get
}
public var kAFTextViewControllerDomain: Swift.String
public func af_pointSizeDifference(for category: UIKit.UIContentSizeCategory) -> CoreGraphics.CGFloat
public var af_keyWindowBounds: CoreGraphics.CGRect {
  get
}
public func af_rectInvert(_ rect: CoreGraphics.CGRect) -> CoreGraphics.CGRect
@objc open class HCTopAlignedContentLabel : UIKit.UILabel {
  @objc override dynamic open func drawText(in rect: CoreGraphics.CGRect)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc open class HCUtils : ObjectiveC.NSObject {
  public static func createUniqueID() -> Swift.String
  public static func dictionaryFromJsonString(_ text: Swift.String) -> [Swift.String : Swift.AnyObject]?
  public static func imageInHCBundle(_ name: Swift.String) -> UIKit.UIImage?
  public static func xibBundle() -> Foundation.Bundle?
  public static func coreDataBundle() -> Foundation.Bundle?
  public static func appFriendsBundle() -> Foundation.Bundle?
  public static func registerNib(_ tableView: UIKit.UITableView, nibName: Swift.String, forCellReuseIdentifier identifier: Swift.String)
  public static func messageTimestampString(_ date: Foundation.Date?) -> Swift.String
  public static func messageDateLabelString(_ date: Foundation.Date?) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc open class BlockLongPress : UIKit.UILongPressGestureRecognizer {
  @objc open func didLongPressed(_ longPress: UIKit.UILongPressGestureRecognizer)
  @objc deinit
}
@objc open class AFBaseTypingIndicatorView : UIKit.UIView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension AFBaseTypingIndicatorView {
  @objc dynamic open func dismissIndicator()
  @objc dynamic open var isVisible: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
}
@objc open class BlockTap : UIKit.UITapGestureRecognizer {
  @objc open func didTap(_ tap: UIKit.UITapGestureRecognizer)
  @objc deinit
}
@objc public enum AFGifContentRating : Swift.Int {
  case youth = 0
  case general = 1
  case parentalGuide = 2
  case parentalGuide13 = 3
  case restricted = 4
  public func toString() -> Swift.String
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum AFGifContentType : Swift.Int {
  case sticker = 0
  case normal = 1
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension UIImage {
  public convenience init(gifData: Foundation.Data)
  public convenience init(gifData: Foundation.Data, levelOfIntegrity: Swift.Float)
  public convenience init(gifName: Swift.String)
  public convenience init(gifName: Swift.String, levelOfIntegrity: Swift.Float)
  public func setGifFromData(_ data: Foundation.Data, levelOfIntegrity: Swift.Float)
  public func setGif(_ name: Swift.String)
  public func framesCount() -> Swift.Int
  public func setGif(_ name: Swift.String, levelOfIntegrity: Swift.Float)
  public func clear()
  public var imageSource: ImageIO.CGImageSource? {
    get
    set(newValue)
  }
  public var displayRefreshFactor: Swift.Int? {
    get
    set(newValue)
  }
  public var imageSize: Swift.Int? {
    get
    set(newValue)
  }
  public var imageCount: Swift.Int? {
    get
    set(newValue)
  }
  public var displayOrder: [Swift.Int]? {
    get
    set(newValue)
  }
  public var imageData: Foundation.Data? {
    get
    set(newValue)
  }
}
extension AppFriendsUI.AFTokenInputView : UIKit.UITextFieldDelegate {}
