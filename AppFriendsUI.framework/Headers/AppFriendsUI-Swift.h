// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
@import SlackTextViewController;
@import CoreGraphics;
@import AVFoundation;
@import CoreData;
@import CLTokenInputView;
@import SESlideTableViewCell;
@import AppFriendsCore;
@import MapKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
enum AFAttachmentType : NSInteger;

SWIFT_CLASS("_TtC12AppFriendsUI12AFAttachment")
@interface AFAttachment : NSObject
@property (nonatomic, readonly) enum AFAttachmentType type;
- (nonnull instancetype)initWithType:(enum AFAttachmentType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, AFAttachmentType) {
  AFAttachmentTypeImage = 0,
  AFAttachmentTypeVideo = 1,
  AFAttachmentTypeGif = 2,
  AFAttachmentTypeLocation = 3,
};

enum AFDialogType : NSInteger;
@class AFUser;
@class AFMessage;
@class NSError;

/**
  Dialog interface provides api to access, create and update dialog
*/
SWIFT_CLASS("_TtC12AppFriendsUI8AFDialog")
@interface AFDialog : NSObject
/**
  dialog id
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/**
  dialog type
*/
@property (nonatomic, readonly) enum AFDialogType type;
@property (nonatomic, copy) NSString * _Nullable title;
/**
  dialgot creation time
*/
@property (nonatomic, readonly, copy) NSDate * _Nullable createTime;
/**
  custom data string. You can set this propery when creating a dialog and use it carry extra data
*/
@property (nonatomic, copy) NSString * _Nullable customData;
/**
  is dialog muted
*/
@property (nonatomic) BOOL muted;
/**
  is dialog diabled
*/
@property (nonatomic) BOOL disabled;
/**
  unread message count for the dialog. Use it to display badge
*/
@property (nonatomic) NSInteger unreadMessageCount;
/**
  a cover image url. only open channel would have this property
*/
@property (nonatomic, copy) NSString * _Nullable coverImageURL;
/**
  the text preview of the last message the dialog has received
*/
@property (nonatomic, copy) NSString * _Nullable lastMessageText;
/**
  the time of the last message
*/
@property (nonatomic, copy) NSDate * _Nullable lastMessageTime;
/**
  the members in the dialog
*/
@property (nonatomic, copy) NSArray<AFUser *> * _Nullable members;
/**
  send typing started signal
*/
- (void)startTyping;
/**
  send typing end signal
*/
- (void)endTyping;
/**
  Resend a failed message
  \param message message to resend

  \param completion completion block. Will contain the error if the call failed

*/
- (void)resendMessageWithMessage:(AFMessage * _Nonnull)message completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/**
  Leave a dialog
  \param dialog the dialog which the user wants to leave

  \param completion completion block. Will contain the error if the call failed

*/
- (void)leaveDialogWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/**
  mute a dialog
  \param completion completion block. Will contain the error if the call failed

*/
- (void)muteWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/**
  unmute a dialog
  \param completion completion block. Will contain the error if the call failed

*/
- (void)unmuteWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/**
  Update group dialog name
  \param name new name of the group dialog

  \param completion completion block. Will contain the error if the call failed

*/
- (void)updateDialogNameWithDialogName:(NSString * _Nonnull)name completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/**
  Add members to a group dialog
  \param members provide user id array containing users to be added to the dialog

  \param completion completion block. Will contain the error if the call failed

*/
- (void)addMembersWithNewMembers:(NSArray<NSString *> * _Nonnull)members completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/**
  Create a group dialog with multiple users
  \param id Optional, but you can choose to provide an unique id to the dialog yourself. If this value is not provided, we will create an unique id for you. This is a good way for you to bind the dialog with certain feature or part of your app.

  \param members 

  \param customData the custom data string of the user. You can use this to attach additional information of the dialog

  \param pushData additional data you can include to the push notification generated inside this dialog

  \param title dialog title, if not provided, the default dialog title will be used

  \param completion completion block. The id of the newly created dialog will be found here. Will contain the error if the call failed

*/
+ (void)createGroupDialogWithDialogID:(NSString * _Nullable)id members:(NSArray<NSString *> * _Nonnull)members customData:(NSString * _Nullable)customData pushData:(NSString * _Nullable)pushData title:(NSString * _Nullable)title completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
/**
  Create an 1:1 dialog between the current user with another user. If there’s already a dialog exists with the two users, the same dialog will be returned.
  \param userID id of the other user

  \param completion completion block. Will contain the error if the call failed

*/
+ (void)createIndividualDialogWithUser:(NSString * _Nonnull)userID completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
/**
  get all channel dialogs that the user is currently in
  \param completion completion block will contain the list of dialogs or an error if request failed

*/
+ (void)getChannelsWithCompletion:(void (^ _Nullable)(NSArray<AFDialog *> * _Nullable, NSError * _Nullable))completion;
/**
  get all private dialogs that the user is currently in
  \param completion completion block will contain the list of dialogs or an error if request failed

*/
+ (void)getDialogsWithCompletion:(void (^ _Nullable)(NSArray<AFDialog *> * _Nullable, NSError * _Nullable))completion;
/**
  Fetch a dialog using dialog id
  \param id dialog id used to fetch the dialog information

  \param completion completion block will contain the dialog object or an error if request failed

*/
+ (void)getDialogWithDialogID:(NSString * _Nonnull)id completion:(void (^ _Nullable)(AFDialog * _Nullable, NSError * _Nullable))completion;
/**
  Total unread message count

  returns:
  return the total unread message count
*/
+ (NSInteger)totalUnreadMessageCount;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, AFDialogType) {
  AFDialogTypeUnknown = -1,
  AFDialogTypeIndividual = 0,
  AFDialogTypeGroup = 1,
  AFDialogTypeChannel = 2,
};

enum AFEventName : NSInteger;
@protocol AFEventSubscriber;

/**
  Events are used as a way to actively communicate with the hosting app. Inside of our SDK/platform. Developers should be able to add multiple observers to monitor events that the SDK emits
*/
SWIFT_CLASS("_TtC12AppFriendsUI7AFEvent")
@interface AFEvent : NSObject
/**
  Event name
*/
@property (nonatomic, readonly) enum AFEventName name;
/**
  Event data object
*/
@property (nonatomic, readonly) id _Nullable data;
/**
  subscribe an object to receive the emitted events
  \param object the subscriber

*/
+ (void)subscribeWithSubscriber:(id <AFEventSubscriber> _Nonnull)object;
/**
  unsubscribe an object to receive the emitted events
  \param object the subscriber

*/
+ (void)unsubscribeWithSubscriber:(id <AFEventSubscriber> _Nonnull)object;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, AFEventName) {
  AFEventNameEventDialogCreated = 0,
  AFEventNameEventDialogLeft = 1,
  AFEventNameEventDialogUpdated = 2,
  AFEventNameEventTypingStatusUpdated = 4,
  AFEventNameEventMessageReceived = 5,
  AFEventNameEventUserSelected = 6,
  AFEventNameEventDuplicateSession = 7,
};


SWIFT_PROTOCOL("_TtP12AppFriendsUI17AFEventSubscriber_")
@protocol AFEventSubscriber
- (void)emitEvent:(AFEvent * _Nonnull)event;
@end


SWIFT_CLASS("_TtC12AppFriendsUI15AFGifAttachment")
@interface AFGifAttachment : AFAttachment
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithType:(enum AFAttachmentType)type SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, AFGifContentRating) {
  AFGifContentRatingYouth = 0,
  AFGifContentRatingGeneral = 1,
  AFGifContentRatingParentalGuide = 2,
  AFGifContentRatingParentalGuide13 = 3,
  AFGifContentRatingRestricted = 4,
};


SWIFT_CLASS("_TtC12AppFriendsUI17AFImageAttachment")
@interface AFImageAttachment : AFAttachment
@property (nonatomic, readonly, copy) NSString * _Nonnull fullSizeURL;
@property (nonatomic, readonly, copy) NSString * _Nonnull thumbnailURL;
- (nonnull instancetype)initWithFullSizeURL:(NSString * _Nonnull)fullSizeURL thumbnailURL:(NSString * _Nonnull)thumbnailURL OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithType:(enum AFAttachmentType)type SWIFT_UNAVAILABLE;
@end

@class MKMapItem;

SWIFT_CLASS("_TtC12AppFriendsUI20AFLocationAttachment")
@interface AFLocationAttachment : AFAttachment
@property (nonatomic, readonly, strong) MKMapItem * _Nonnull mapItem;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSString * _Nonnull subtitle;
- (nonnull instancetype)initWithMapItem:(MKMapItem * _Nonnull)mapItem title:(NSString * _Nonnull)title subtitle:(NSString * _Nonnull)subtitle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithType:(enum AFAttachmentType)type SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12AppFriendsUI9AFMessage")
@interface AFMessage : NSObject
/**
  message sender ID. It’s nil when the message is a system message
*/
@property (nonatomic, readonly, copy) NSString * _Nullable senderID;
/**
  message sender name. It’s nil when the message is a system message
*/
@property (nonatomic, readonly, copy) NSString * _Nullable senderName;
/**
  message sender avatar.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable senderAvatar;
/**
  id of the dialog which the message is in
*/
@property (nonatomic, readonly, copy) NSString * _Nullable dialogID;
/**
  message unique id
*/
@property (nonatomic, readonly, copy) NSString * _Nullable id;
/**
  the custom data string of the message. You can use this to attach additional information of the message
*/
@property (nonatomic, readonly, copy) NSString * _Nullable customData;
/**
  has the message been read by the user
*/
@property (nonatomic) BOOL read;
/**
  time when the message was received
*/
@property (nonatomic, copy) NSDate * _Nullable receiveTime;
/**
  time when the message was sent
*/
@property (nonatomic, copy) NSDate * _Nullable sentTime;
/**
  text content in the message
*/
@property (nonatomic, copy) NSString * _Nullable text;
/**
  the attachment in the message, if any
*/
@property (nonatomic, readonly, strong) AFAttachment * _Nullable attachment;
/**
  check if the message is sent by the current user

  returns:
  true if the sender is the current user
*/
- (BOOL)isOutgoing;
/**
  mark the message as read, and also post a read receipt to acknownledge the current user has read the message.
  Note: this will only work on messages sent by other users
*/
- (void)markAsRead;
/**
  mark the message as received, and also post a received receipt to acknownledge the current user has received the message on the device, but not necessarily read it.
  Note: this will only work on messages sent by other users
*/
- (void)markAsReceived;
/**
  get receipts of the message
  \param completion completion block will contain the users id’s for those who received the message and the users id’s for those who have read the message

*/
- (void)getReceiptsWithCompletion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
/**
  check if the message is a system message

  returns:
  true if the message is a system message
*/
- (BOOL)isSystemMessage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, AFMessageSendingStatus) {
  AFMessageSendingStatusSending = 0,
  AFMessageSendingStatusSuccess = 1,
  AFMessageSendingStatusFailed = 2,
};


SWIFT_CLASS("_TtC12AppFriendsUI18AFPushNotification")
@interface AFPushNotification : NSObject
/**
  Registering the current device for push notification
  \param token the push token to be used

  \param completion callback, which would report error if the call failed

*/
+ (void)registerDeviceForPushNotificationWithPushToken:(NSString * _Nonnull)token completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/**
  Unregistering the current device for push notification
  \param token the push token to be used

  \param completion callback, which would report error if the call failed

*/
+ (void)unregisterDeviceForPushNotificationWithPushToken:(NSString * _Nonnull)token completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/**
  Process the remote push notification. Please pass the notification object to us so we can help
  optimize the user experience. Especially if you are entering the app using the push notification sent by AppFriends. We will only look at push notification coming from AppFriends.
  \param info user info object inside the push notification

*/
+ (void)processPushNotificationWithNotificationUserInfo:(NSDictionary * _Nonnull)info;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Pubic interface for user session related functions
*/
SWIFT_CLASS("_TtC12AppFriendsUI9AFSession")
@interface AFSession : NSObject
/**
  Perform login
  \param name the username

  \param id the id of the user

  \param completion will call back with the user’s token, or if the login failed, it will callback with error

*/
+ (void)loginWithUsername:(NSString * _Nonnull)name userID:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
/**
  Logout the current user.
  <em>warning</em>* Please Note that this call alone does not unregister the device for push notification. If you have previously registered the device for push, we recommand calling AFSession.unregisterDeviceForPushNotification before you call logout.
  \param completion call back block, which will have an error if the logout has failed

*/
+ (void)logoutWithComplete:(void (^ _Nullable)(NSError * _Nullable))completion;
/**
  Check if there’s an user currently logged in

  returns:
  true if the user is logged in
*/
+ (BOOL)isLoggedIn;
/**
  get the current user id

  returns:
  the current user id
*/
+ (NSString * _Nullable)currentUserID;
/**
  get the current user name

  returns:
  the current user name
*/
+ (NSString * _Nullable)currentUserName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  AFUser object which contains information of a user. This class also provides public interface to access user data
*/
SWIFT_CLASS("_TtC12AppFriendsUI6AFUser")
@interface AFUser : NSObject
/**
  user id
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/**
  user name
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull username;
/**
  avatar url string
*/
@property (nonatomic, readonly, copy) NSString * _Nullable avatarURL;
/**
  if the user has been blocked by the current user
*/
@property (nonatomic, readonly) BOOL blocked;
/**
  the custom data string of the user. You can use this to attach additional information of the user
*/
@property (nonatomic, copy) NSString * _Nullable customData;
/**
  Users are equal if their ids are the same
  \param object another user to copare


  returns:
  true if the two users have the same id
*/
- (BOOL)isEqual:(id _Nullable)object;
/**
  fetch a single user from the user id
  \param id user’s id

  \param completion completion block contains the user object, or the error if the request failed

*/
+ (void)getUserWithUserID:(NSString * _Nonnull)id completion:(void (^ _Nullable)(AFUser * _Nullable, NSError * _Nullable))completion;
/**
  block an user. After blocking, the user will not be able to send message to the current user
  \param id id of the user to be blocked

  \param completion completion block. If the call fails, it will contain the error

*/
+ (void)blockUserWithUserID:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/**
  unblock an user
  \param id id of the user to be blocked

  \param completion completion block. If the call fails, it will contain the error

*/
+ (void)unblockUserWithUserID:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/**
  fetch the list of all blocked users
  \param completion completion block. If the call is successful, it will return an array of blocked user ids. If it fails, it will contain the error

*/
+ (void)getBlockedUsersWithCompletion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
/**
  update username of the current user
  \param username new username

  \param completion completion block. Will report error if the call fails

*/
+ (void)updateUserNameWithUsername:(NSString * _Nonnull)username completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/**
  update avatar of the current user
  \param avatar new avatar url

  \param completion completion block. Will report error if the call fails

*/
+ (void)updateUserAvatarWithAvatar:(NSString * _Nonnull)avatar completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/**
  update custom data of the current user
  \param custom data new custom data

  \param completion completion block. Will report error if the call fails

*/
+ (void)updateUserCustomDataWithCustomData:(NSString * _Nonnull)customData completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/**
  get the current user

  returns:
  the current user object or nil if you haven’t logged in yet
*/
+ (AFUser * _Nullable)currentUser;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12AppFriendsUI17AFVideoAttachment")
@interface AFVideoAttachment : AFAttachment
@property (nonatomic, readonly, copy) NSString * _Nonnull streamingURL;
@property (nonatomic, readonly, copy) NSString * _Nonnull thumbnailURL;
- (nonnull instancetype)initWithStreamingURL:(NSString * _Nonnull)streamingURL thumbnailURL:(NSString * _Nullable)thumbnailURL OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithType:(enum AFAttachmentType)type SWIFT_UNAVAILABLE;
@end

@class UIViewController;
@class HCSidePanelViewController;

SWIFT_CLASS("_TtC12AppFriendsUI12AppFriendsUI")
@interface AppFriendsUI : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AppFriendsUI * _Nonnull sharedInstance;)
+ (AppFriendsUI * _Nonnull)sharedInstance;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDialogLeaveNotification;)
+ (NSString * _Nonnull)kDialogLeaveNotification;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kTotalUnreadMessageCountChangedNotification;)
+ (NSString * _Nonnull)kTotalUnreadMessageCountChangedNotification;
- (void)initialize:(NSString * _Nonnull)appKey secret:(NSString * _Nonnull)secret completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion SWIFT_METHOD_FAMILY(none);
- (BOOL)initialized SWIFT_METHOD_FAMILY(none);
- (void)logout:(void (^ _Nullable)(NSError * _Nullable))completion;
- (HCSidePanelViewController * _Nonnull)presentVCInSidePanelFromVC:(UIViewController * _Nonnull)fromVC showVC:(UIViewController * _Nonnull)showVC;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
*/
SWIFT_CLASS("_TtC12AppFriendsUI14BlockLongPress")
@interface BlockLongPress : UILongPressGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action SWIFT_UNAVAILABLE;
- (void)didLongPressed:(UILongPressGestureRecognizer * _Nonnull)longPress;
@end


/**
  Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
*/
SWIFT_CLASS("_TtC12AppFriendsUI8BlockPan")
@interface BlockPan : UIPanGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action SWIFT_UNAVAILABLE;
- (void)didPan:(UIPanGestureRecognizer * _Nonnull)pan;
@end


/**
  Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
*/
SWIFT_CLASS("_TtC12AppFriendsUI10BlockPinch")
@interface BlockPinch : UIPinchGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action SWIFT_UNAVAILABLE;
- (void)didPinch:(UIPinchGestureRecognizer * _Nonnull)pinch;
@end


/**
  Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
*/
SWIFT_CLASS("_TtC12AppFriendsUI10BlockSwipe")
@interface BlockSwipe : UISwipeGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action SWIFT_UNAVAILABLE;
- (void)didSwipe:(UISwipeGestureRecognizer * _Nonnull)swipe;
@end


/**
  Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
*/
SWIFT_CLASS("_TtC12AppFriendsUI8BlockTap")
@interface BlockTap : UITapGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action SWIFT_UNAVAILABLE;
- (void)didTap:(UITapGestureRecognizer * _Nonnull)tap;
@end


SWIFT_CLASS("_TtC12AppFriendsUI16CoreStoreManager")
@interface CoreStoreManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CoreStoreManager * _Nonnull sharedInstance;)
+ (CoreStoreManager * _Nonnull)sharedInstance;
- (void)initialize:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion SWIFT_METHOD_FAMILY(none);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;
@class UITableView;
@class UITextView;
@class HCChatTableViewCell;
@class UITableViewCell;
@class UIImagePickerController;
@class UIScrollView;
@class UIGestureRecognizer;
@class UICollectionViewLayout;
@class NSBundle;

SWIFT_CLASS("_TtC12AppFriendsUI24HCBaseChatViewController")
@interface HCBaseChatViewController : SLKTextViewController <UIImagePickerControllerDelegate, UINavigationControllerDelegate, AFEventSubscriber>
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (AFDialog * _Nullable)currentDialog;
@property (nonatomic, readonly, strong) UITableView * _Nonnull tableView;
/**
  Action when right button, which is the send button, is triggered
  \param sender the send button

*/
- (void)didPressRightButton:(id _Nullable)sender;
- (void)didPressLeftButton:(id _Nullable)sender;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
- (HCChatTableViewCell * _Nonnull)messagingCellAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)heightForAutoCompletionView;
- (void)didChangeAutoCompletionPrefix:(NSString * _Nonnull)prefix andWord:(NSString * _Nonnull)word;
- (void)showAutoCompletionView:(BOOL)show;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didEndDisplayingCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView;
- (NSIndexPath * _Nullable)tableView:(UITableView * _Nonnull)tableView willSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)imagePickerControllerDidCancel:(UIImagePickerController * _Nonnull)picker;
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *, id> * _Nonnull)info;
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer;
- (void)emitEvent:(AFEvent * _Nonnull)event;
- (void)messagesWillChange;
- (void)messagesDidChange;
- (void)messagesWillRefresh;
- (void)messagesDidRefresh;
- (void)insertMessageWithMessage:(AFMessage * _Nonnull)message indexPath:(NSIndexPath * _Nonnull)indexPath;
- (nonnull instancetype)initWithTableViewStyle:(UITableViewStyle)style SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface HCBaseChatViewController (SWIFT_EXTENSION(AppFriendsUI)) <AVAssetResourceLoaderDelegate>
@end


@interface HCBaseChatViewController (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface HCBaseChatViewController (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface HCBaseChatViewController (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface HCBaseChatViewController (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface HCBaseChatViewController (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface HCBaseChatViewController (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface HCBaseChatViewController (SWIFT_EXTENSION(AppFriendsUI))
- (void)showProgress:(float)progress message:(NSString * _Nonnull)message;
- (void)showLoading:(NSString * _Nullable)message;
- (void)showErrorWithMessage:(NSString * _Nullable)message;
- (void)showSuccessWithMessage:(NSString * _Nullable)message;
- (void)hideHUD;
@end


@interface HCBaseChatViewController (SWIFT_EXTENSION(AppFriendsUI))
@end


SWIFT_PROTOCOL("_TtP12AppFriendsUI27HCChatTableViewCellDelegate_")
@protocol HCChatTableViewCellDelegate
- (void)attachmentTappedInCell:(HCChatTableViewCell * _Nonnull)cell;
- (void)avatarTappedInCell:(HCChatTableViewCell * _Nonnull)cell;
- (void)failedButtonTappedInCell:(HCChatTableViewCell * _Nonnull)cell;
- (void)linkTappedInCell:(HCChatTableViewCell * _Nonnull)cell url:(NSURL * _Nonnull)url;
@end


@interface HCBaseChatViewController (SWIFT_EXTENSION(AppFriendsUI)) <HCChatTableViewCellDelegate>
/**
  Image attachment on a message is tapped
  \param imageAttachment the image attachment

*/
- (void)messageImageTappedWithAttachment:(AFImageAttachment * _Nonnull)imageAttachment;
/**
  Video attachment on a message is tapped
  \param videoAttachment the video attachment

*/
- (void)messageVideoTappedWithAttachment:(AFVideoAttachment * _Nonnull)videoAttachment;
/**
  Location attachment on message is tapped
  \param locationAttachment the location attachment

*/
- (void)messageLocationTappedWithAttachment:(AFLocationAttachment * _Nonnull)locationAttachment;
/**
  Link inside a chat cell is tapped
  \param cell cell which contains the link

  \param url the url that is tapped

*/
- (void)linkTappedInCell:(HCChatTableViewCell * _Nonnull)cell url:(NSURL * _Nonnull)url;
/**
  Failed button is tapped in chat cell
  \param cell the cell which contains the fail button

*/
- (void)failedButtonTappedInCell:(HCChatTableViewCell * _Nonnull)cell;
/**
  avatar is tapped in chat cell
  \param cell the cell which contains the avatar

*/
- (void)avatarTappedInCell:(HCChatTableViewCell * _Nonnull)cell;
/**
  Triggered when attachment in the cell is tapped
  \param cell the cell that contains the attachment

*/
- (void)attachmentTappedInCell:(HCChatTableViewCell * _Nonnull)cell;
/**
  Triggered when attachment is tapped
  \param attachment the attachment which is tapped

*/
- (void)didTapAttachment:(AFAttachment * _Nonnull)attachment;
@end


@interface HCBaseChatViewController (SWIFT_EXTENSION(AppFriendsUI))
@end

@class UIImageView;
@class UIImage;
@class UIBarButtonItem;

@interface HCBaseChatViewController (SWIFT_EXTENSION(AppFriendsUI))
/**
  Fill the sender avatar in the chat message cell at index path
  \param indexPath indexpath of the cell

  \param cell the cell to fill

*/
- (void)fillAvatarAtIndexPath:(NSIndexPath * _Nonnull)indexPath avatarImageView:(UIImageView * _Nullable)avatarImageView;
/**
  Access message from an indexpath
  \param indexPath position of the message in the message tableview


  returns:
  the message object
*/
- (AFMessage * _Nullable)messageAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/**
  Report typing status updated
  \param dialogID the id of the dialog in which the typing status has updated

  \param userName username of the user in the typing event

  \param typing true if the user is typing, and false if the user has stopped typing

*/
- (void)didUpdateTypingStatus:(NSString * _Nonnull)dialogID userName:(NSString * _Nonnull)userName typing:(BOOL)typing;
/**
  Loading dialog failed
  \param error the error describes why the loading was failed

*/
- (void)didFailToLoadDialog:(NSError * _Nullable)error;
- (void)onDialogLoaded;
/**
  this function will open the system photo picker for you the user to pick image or video to send
*/
- (void)pickLocalImageOrVideo;
/**
  this function will open camera for the user to take new image or record video to send
*/
- (void)openCamera;
/**
  open the gif selector
*/
- (void)pickGif;
/**
  user wants to share location. open the location share view
*/
- (void)shareLocation;
/**
  this function is triggered when the attachment button on the left side of the input bar is tapped
*/
- (void)chooseAttachmentButtonTapped;
/**
  send a text message
  \param text the content of the text message

*/
- (void)sendTextWithText:(NSString * _Nonnull)text;
/**
  send an image message
  \param image the image to be sent

*/
- (void)sendImage:(UIImage * _Nonnull)image;
/**
  send an gif message
  \param url the url of the gif

*/
- (void)sendGifWithGifImageURL:(NSString * _Nonnull)url;
/**
  send a location
  \param item Mapkit item which contains all information of the location

*/
- (void)sendLocationWithMapItem:(MKMapItem * _Nonnull)item;
/**
  The left side navigation bar item. You can override this function to have your own navigation bar item

  returns:
  the navigation bar item
*/
- (UIBarButtonItem * _Nullable)leftBarButtonItem;
/**
  The right side navigation bar item. You can override this function to have your own navigation bar item

  returns:
  the navigation bar item
*/
- (UIBarButtonItem * _Nullable)rightBarButtonItem;
/**
  The placeholder image for avatar image of the chat message cell. You can override this method to provide your own placeholder image
  \param indexPath the index path of the cell


  returns:
  the placeholder image
*/
- (UIImage * _Nonnull)avatarImagePlaceHolderAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/**
  update the title of the view by assigning a UILabel to navigationItem.titleView
*/
- (void)updateTitle;
/**
  callback after sending text message
*/
- (void)didSendTextMessage;
/**
  callback after sending image message
*/
- (void)didSendImageMessage;
/**
  callback after a gif is sent
*/
- (void)didSendGifMessage;
/**
  callback after a video message is sent
*/
- (void)didSendVideoMessage;
/**
  callback after a location message is sent
*/
- (void)didSendLocationMessage;
/**
  You can override this method to return false in your class to always hide username

  returns:
  true by default
*/
- (BOOL)showUserNameOnIncomingMessage;
/**
  You can override this method to return true in your class to show current user name on outgoing messages

  returns:
  false by default
*/
- (BOOL)showUserNameOnOutgoingMessage;
/**
  The text attributes for message text content. You can override this function to style message text attributes
  \param out true if the message is sent by the current user


  returns:
  message text attributes
*/
- (NSDictionary<NSString *, id> * _Nonnull)messagingCellAttributesWithIsOutGoingMessage:(BOOL)out;
/**
  The text attributes for system message content. You can override this function to style system message differently

  returns:
  system text attributes
*/
- (NSDictionary<NSString *, id> * _Nonnull)systemMessagingCellAttributes;
/**
  The text attributes for links inside the message content. You can override this function to style the text differently
  \param out true if the message is sent by the current user


  returns:
  link text attributes
*/
- (NSDictionary<NSString *, id> * _Nonnull)linkTextAttributesWithIsOutGoingMessage:(BOOL)out;
@end


SWIFT_CLASS("_TtC12AppFriendsUI20HCBaseViewController")
@interface HCBaseViewController : UIViewController
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (void)showProgress:(float)progress message:(NSString * _Nonnull)message;
- (void)showLoading:(NSString * _Nullable)message;
- (void)showErrorWithMessage:(NSString * _Nullable)message;
- (void)showSuccessWithMessage:(NSString * _Nullable)message;
- (void)hideHUD;
@end

@class NSManagedObjectContext;
@class NSEntityDescription;
@class NSNumber;

SWIFT_CLASS("_TtC12AppFriendsUI10_HCChannel")
@interface _HCChannel : NSManagedObject
+ (NSString * _Nonnull)entityName;
+ (NSEntityDescription * _Nullable)entityWithManagedObjectContext:(NSManagedObjectContext * _Nonnull)managedObjectContext;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithManagedObjectContext:(NSManagedObjectContext * _Nonnull)managedObjectContext;
@property (nonatomic, copy) NSString * _Nullable channelID;
@property (nonatomic, copy) NSString * _Nullable customData;
@property (nonatomic, strong) NSNumber * _Nullable disabled;
@property (nonatomic, copy) NSString * _Nullable title;
@end


SWIFT_CLASS_NAMED("HCChannel")
@interface HCChannel : _HCChannel
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP12AppFriendsUI37HCOnlineUsersBannerControllerDelegate_")
@protocol HCOnlineUsersBannerControllerDelegate
- (void)userSelected:(NSString * _Nonnull)userID;
@end

@class HCChannelChatViewController;
@class HCOnlineUsersBannerController;

SWIFT_CLASS("_TtC12AppFriendsUI32HCChannelChatContainerController")
@interface HCChannelChatContainerController : HCBaseViewController <HCOnlineUsersBannerControllerDelegate, UIGestureRecognizerDelegate>
@property (nonatomic, strong) HCChannelChatViewController * _Nullable chatVC;
@property (nonatomic, strong) HCOnlineUsersBannerController * _Nullable onlineUserHeaderVC;
@property (nonatomic, copy) NSString * _Nonnull _dialogID;
- (nonnull instancetype)initWithDialogID:(NSString * _Nonnull)dialogID;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (void)userSelected:(NSString * _Nonnull)userID;
- (void)updateTitle;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12AppFriendsUI27HCChannelChatViewController")
@interface HCChannelChatViewController : HCBaseChatViewController
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (UIBarButtonItem * _Nullable)rightBarButtonItem;
- (void)settingButtonTapped;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)fetchMoreMessages;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI22HCChannelTableViewCell")
@interface HCChannelTableViewCell : UITableViewCell
- (void)awakeFromNib;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI28HCChannelsListViewController")
@interface HCChannelsListViewController : HCBaseViewController <UIScrollViewDelegate, UITableViewDataSource, UITableViewDelegate>
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class HCGroupCreatorViewController;

SWIFT_PROTOCOL("_TtP12AppFriendsUI36HCGroupCreatorViewControllerDelegate_")
@protocol HCGroupCreatorViewControllerDelegate
- (void)usersSelected:(NSArray<NSString *> * _Nonnull)users;
- (void)closeButtonTapped:(HCGroupCreatorViewController * _Nonnull)selectVC;
@end

@class SMSegmentView;

SWIFT_CLASS("_TtC12AppFriendsUI29HCChatContainerViewController")
@interface HCChatContainerViewController : HCBaseViewController <HCGroupCreatorViewControllerDelegate>
@property (nonatomic, weak) SMSegmentView * _Null_unspecified _segmentView;
- (nonnull instancetype)initWithTabs:(NSArray<NSString *> * _Nonnull)tabs OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (void)close;
- (void)moreButtonTapped;
- (void)addSegmentedControler;
- (void)switchTabs:(SMSegmentView * _Nonnull)segmentView;
- (void)displayChannelsList;
- (void)displayDialogsList;
- (void)displayContactsList;
- (void)removeVC:(UIViewController * _Nullable)contentVC;
- (void)usersSelected:(NSArray<NSString *> * _Nonnull)users;
- (void)closeButtonTapped:(HCGroupCreatorViewController * _Nonnull)selectVC;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class NSTextContainer;

SWIFT_CLASS("_TtC12AppFriendsUI17HCChatContentView")
@interface HCChatContentView : UITextView
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSSet;
@class NSMutableSet;

SWIFT_CLASS("_TtC12AppFriendsUI13_HCChatDialog")
@interface _HCChatDialog : NSManagedObject
+ (NSString * _Nonnull)entityName;
+ (NSEntityDescription * _Nullable)entityWithManagedObjectContext:(NSManagedObjectContext * _Nonnull)managedObjectContext;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithManagedObjectContext:(NSManagedObjectContext * _Nonnull)managedObjectContext;
@property (nonatomic, copy) NSString * _Nullable coverImageURL;
@property (nonatomic, copy) NSDate * _Nullable createTime;
@property (nonatomic, copy) NSString * _Nullable customData;
@property (nonatomic, copy) NSString * _Nullable dialogID;
@property (nonatomic, strong) NSNumber * _Nullable disabled;
@property (nonatomic, copy) NSDate * _Nullable lastMessageReadTime;
@property (nonatomic, copy) NSString * _Nullable lastMessageText;
@property (nonatomic, copy) NSDate * _Nullable lastMessageTime;
@property (nonatomic, strong) NSNumber * _Nullable muted;
@property (nonatomic, strong) NSNumber * _Nullable sectionOrder;
@property (nonatomic, copy) NSString * _Nullable sectionTitle;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, strong) NSNumber * _Nullable unreadMessages;
@property (nonatomic, strong) NSSet * _Nonnull members;
- (NSMutableSet * _Nonnull)membersSet;
@end


SWIFT_CLASS_NAMED("HCChatDialog")
@interface HCChatDialog : _HCChatDialog
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSLayoutConstraint;
@class UILabel;
@class UIButton;

SWIFT_CLASS("_TtC12AppFriendsUI19HCChatTableViewCell")
@interface HCChatTableViewCell : UITableViewCell <UIScrollViewDelegate, UITextViewDelegate>
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Nullable messageWidthConstraint;
@property (nonatomic, strong) IBOutlet NSLayoutConstraint * _Nullable messageLeadingConstraint;
@property (nonatomic, strong) IBOutlet NSLayoutConstraint * _Nullable messageTrailingConstraint;
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Nullable userNameHeightConstraint;
@property (nonatomic, weak) IBOutlet UILabel * _Nullable userNameLabel;
@property (nonatomic, weak) IBOutlet HCChatContentView * _Nullable messageContentLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Nullable seenByLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Nullable dateLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Nullable timeLabel;
@property (nonatomic, weak) IBOutlet UIImageView * _Nullable userAvatarImageView;
@property (nonatomic, weak) IBOutlet UIImageView * _Nullable contentImageView;
@property (nonatomic, weak) IBOutlet UIButton * _Nullable failedButton;
@property (nonatomic, weak) IBOutlet UILabel * _Nullable videoPlayIcon;
@property (nonatomic, weak) id <HCChatTableViewCellDelegate> _Nullable delegate;
@property (nonatomic, copy) NSDate * _Nullable messageTime;
@property (nonatomic) BOOL isSentMessageCell;
- (void)awakeFromNib;
- (void)updateTime;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@class UIColor;

SWIFT_CLASS("_TtC12AppFriendsUI14HCColorPalette")
@interface HCColorPalette : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatBackgroundColor;)
+ (UIColor * _Nullable)chatBackgroundColor;
+ (void)setChatBackgroundColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatOutMessageContentTextColor;)
+ (UIColor * _Nonnull)chatOutMessageContentTextColor;
+ (void)setChatOutMessageContentTextColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatInMessageContentTextColor;)
+ (UIColor * _Nonnull)chatInMessageContentTextColor;
+ (void)setChatInMessageContentTextColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatUserNamelTextColor;)
+ (UIColor * _Nonnull)chatUserNamelTextColor;
+ (void)setChatUserNamelTextColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatTimeLabelTextColor;)
+ (UIColor * _Nonnull)chatTimeLabelTextColor;
+ (void)setChatTimeLabelTextColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatDateLabelTextColor;)
+ (UIColor * _Nonnull)chatDateLabelTextColor;
+ (void)setChatDateLabelTextColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatSystemMessageColor;)
+ (UIColor * _Nonnull)chatSystemMessageColor;
+ (void)setChatSystemMessageColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatSendButtonColor;)
+ (UIColor * _Nullable)chatSendButtonColor;
+ (void)setChatSendButtonColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatOutMessageBubbleColor;)
+ (UIColor * _Nullable)chatOutMessageBubbleColor;
+ (void)setChatOutMessageBubbleColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatInMessageBubbleColor;)
+ (UIColor * _Nullable)chatInMessageBubbleColor;
+ (void)setChatInMessageBubbleColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatMessageFailedButtonColor;)
+ (UIColor * _Nullable)chatMessageFailedButtonColor;
+ (void)setChatMessageFailedButtonColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatVideoPlayIconColor;)
+ (UIColor * _Nonnull)chatVideoPlayIconColor;
+ (void)setChatVideoPlayIconColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatLeaveConversationColor;)
+ (UIColor * _Nullable)chatLeaveConversationColor;
+ (void)setChatLeaveConversationColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatDialogListSectionTitleColor;)
+ (UIColor * _Nullable)chatDialogListSectionTitleColor;
+ (void)setChatDialogListSectionTitleColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatDialogListSectionBgColor;)
+ (UIColor * _Nullable)chatDialogListSectionBgColor;
+ (void)setChatDialogListSectionBgColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatDialogListTitleColor;)
+ (UIColor * _Nonnull)chatDialogListTitleColor;
+ (void)setChatDialogListTitleColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatDialogTimeStampPreviewColor;)
+ (UIColor * _Nonnull)chatDialogTimeStampPreviewColor;
+ (void)setChatDialogTimeStampPreviewColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatDialogMessagePreviewColor;)
+ (UIColor * _Nonnull)chatDialogMessagePreviewColor;
+ (void)setChatDialogMessagePreviewColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatNewMessageDividerColor;)
+ (UIColor * _Nullable)chatNewMessageDividerColor;
+ (void)setChatNewMessageDividerColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatInMessageLinkColor;)
+ (UIColor * _Nullable)chatInMessageLinkColor;
+ (void)setChatInMessageLinkColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatOutMessageLinkColor;)
+ (UIColor * _Nullable)chatOutMessageLinkColor;
+ (void)setChatOutMessageLinkColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatAttachmentIconColor;)
+ (UIColor * _Nullable)chatAttachmentIconColor;
+ (void)setChatAttachmentIconColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatMediaMessageButtonColor;)
+ (UIColor * _Nullable)chatMediaMessageButtonColor;
+ (void)setChatMediaMessageButtonColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatMediaMessageButtonBgColor;)
+ (UIColor * _Nullable)chatMediaMessageButtonBgColor;
+ (void)setChatMediaMessageButtonBgColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatMediaMessageButtonBorderColor;)
+ (UIColor * _Nullable)chatMediaMessageButtonBorderColor;
+ (void)setChatMediaMessageButtonBorderColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatMediaMessageSelectionPanelColor;)
+ (UIColor * _Nullable)chatMediaMessageSelectionPanelColor;
+ (void)setChatMediaMessageSelectionPanelColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable channelChatBannerColor;)
+ (UIColor * _Nullable)channelChatBannerColor;
+ (void)setChannelChatBannerColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull onlineUsersLabelColor;)
+ (UIColor * _Nonnull)onlineUsersLabelColor;
+ (void)setOnlineUsersLabelColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull onlineUserIndicatorColor;)
+ (UIColor * _Nonnull)onlineUserIndicatorColor;
+ (void)setOnlineUserIndicatorColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable avatarBackgroundColor;)
+ (UIColor * _Nullable)avatarBackgroundColor;
+ (void)setAvatarBackgroundColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull avatarColor;)
+ (UIColor * _Nonnull)avatarColor;
+ (void)setAvatarColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull segmentSelectorColor;)
+ (UIColor * _Nonnull)segmentSelectorColor;
+ (void)setSegmentSelectorColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable segmentSelectorOnBgColor;)
+ (UIColor * _Nullable)segmentSelectorOnBgColor;
+ (void)setSegmentSelectorOnBgColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull segmentSelectorOffBgColor;)
+ (UIColor * _Nonnull)segmentSelectorOffBgColor;
+ (void)setSegmentSelectorOffBgColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull segmentSelectorOnTextColor;)
+ (UIColor * _Nonnull)segmentSelectorOnTextColor;
+ (void)setSegmentSelectorOnTextColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull segmentSelectorOffTextColor;)
+ (UIColor * _Nonnull)segmentSelectorOffTextColor;
+ (void)setSegmentSelectorOffTextColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable tableSeparatorColor;)
+ (UIColor * _Nullable)tableSeparatorColor;
+ (void)setTableSeparatorColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable tableBackgroundColor;)
+ (UIColor * _Nullable)tableBackgroundColor;
+ (void)setTableBackgroundColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable tableSectionSeparatorColor;)
+ (UIColor * _Nullable)tableSectionSeparatorColor;
+ (void)setTableSectionSeparatorColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull navigationBarIconColor;)
+ (UIColor * _Nonnull)navigationBarIconColor;
+ (void)setNavigationBarIconColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull navigationBarTitleColor;)
+ (UIColor * _Nonnull)navigationBarTitleColor;
+ (void)setNavigationBarTitleColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable badgeBackgroundColor;)
+ (UIColor * _Nullable)badgeBackgroundColor;
+ (void)setBadgeBackgroundColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull closeButtonBgColor;)
+ (UIColor * _Nonnull)closeButtonBgColor;
+ (void)setCloseButtonBgColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull closeButtonIconColor;)
+ (UIColor * _Nonnull)closeButtonIconColor;
+ (void)setCloseButtonIconColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable searchBarTintColor;)
+ (UIColor * _Nullable)searchBarTintColor;
+ (void)setSearchBarTintColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull emptyTableLabelColor;)
+ (UIColor * _Nonnull)emptyTableLabelColor;
+ (void)setEmptyTableLabelColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull normalTextColor;)
+ (UIColor * _Nonnull)normalTextColor;
+ (void)setNormalTextColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable placeholderTextColor;)
+ (UIColor * _Nullable)placeholderTextColor;
+ (void)setPlaceholderTextColor:(UIColor * _Nullable)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI11HCConstants")
@interface HCConstants : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) double sidePanelSlideAnimationDuration;)
+ (double)sidePanelSlideAnimationDuration;
+ (void)setSidePanelSlideAnimationDuration:(double)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSUInteger maxMessageLength;)
+ (NSUInteger)maxMessageLength;
+ (void)setMaxMessageLength:(NSUInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSTimeInterval timeIntervalForMessageDateLabelDisplay;)
+ (NSTimeInterval)timeIntervalForMessageDateLabelDisplay;
+ (void)setTimeIntervalForMessageDateLabelDisplay:(NSTimeInterval)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI20HCContactSelectField")
@interface HCContactSelectField : CLTokenInputView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI22HCContactTableViewCell")
@interface HCContactTableViewCell : UITableViewCell
- (void)awakeFromNib;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI24HCContactsViewController")
@interface HCContactsViewController : HCBaseViewController
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI26HCDialogChatViewController")
@interface HCDialogChatViewController : HCBaseChatViewController <HCGroupCreatorViewControllerDelegate>
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (UIBarButtonItem * _Nullable)rightBarButtonItem;
- (void)settingButtonTapped;
- (void)emitEvent:(AFEvent * _Nonnull)event;
- (void)didLeaveDialog;
- (void)usersSelected:(NSArray<NSString *> * _Nonnull)users;
- (void)closeButtonTapped:(HCGroupCreatorViewController * _Nonnull)selectVC;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)messagesDidChange;
- (void)insertMessageWithMessage:(AFMessage * _Nonnull)message indexPath:(NSIndexPath * _Nonnull)indexPath;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI32HCDialogMemberCollectionViewCell")
@interface HCDialogMemberCollectionViewCell : UICollectionViewCell
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified userAvatar;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified userNameLabel;
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionView;
@class UIView;
@class UISwitch;

SWIFT_CLASS("_TtC12AppFriendsUI29HCDialogSettingViewController")
@interface HCDialogSettingViewController : HCBaseViewController <UIScrollViewDelegate, UITableViewDataSource, UICollectionViewDelegate, UICollectionViewDataSource, AFEventSubscriber, UITableViewDelegate>
@property (nonatomic, strong) UITableView * _Nullable _tableView;
@property (nonatomic, strong) UICollectionView * _Nullable _membersCollectionView;
- (nonnull instancetype)initWithDialog:(AFDialog * _Nonnull)dialog OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (AFDialog * _Nonnull)currentDialog;
- (UIView * _Nonnull)createMembersListView;
- (UITableView * _Nonnull)createTableView;
- (void)registerTableCells;
- (UIView * _Nonnull)tableFooterView;
- (UIView * _Nonnull)tableSectionView:(NSInteger)section;
- (void)closeView;
- (void)didLeaveDialog;
- (void)leaveDialog;
- (void)muteDialog:(UISwitch * _Nonnull)toggle;
- (void)membersRowTapped;
- (UIBarButtonItem * _Nonnull)leftBarButtonItem;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (BOOL)isMuteConversationRow:(NSIndexPath * _Nonnull)indexPath;
- (BOOL)isDialogNameRow:(NSIndexPath * _Nonnull)indexPath;
- (BOOL)isMembersRow:(NSIndexPath * _Nonnull)indexPath;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)didClickOnMemberWithMemberID:(NSString * _Nonnull)userID;
- (void)fillMemberCell:(HCDialogMemberCollectionViewCell * _Nonnull)cell atIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)reloadMembersRow;
- (void)emitEvent:(AFEvent * _Nonnull)event;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class HCTopAlignedContentLabel;

SWIFT_CLASS("_TtC12AppFriendsUI21HCDialogTableViewCell")
@interface HCDialogTableViewCell : SESlideTableViewCell <SESlideTableViewCellDelegate>
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified dialogAvatarImageView;
@property (nonatomic, weak) IBOutlet UIImageView * _Nullable backgroundImageView;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified userNameLabel;
@property (nonatomic, weak) IBOutlet HCTopAlignedContentLabel * _Null_unspecified lastMessageLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified lastMessageTimeLabel;
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified badgeView;
- (void)awakeFromNib;
- (void)addRightButtonWithText:(NSString * _Null_unspecified)text textColor:(UIColor * _Null_unspecified)textColor backgroundColor:(UIColor * _Null_unspecified)backgroundColor;
- (void)addRightButtonWithImage:(UIImage * _Null_unspecified)image backgroundColor:(UIColor * _Null_unspecified)backgroundColor;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (void)hideBadge:(BOOL)hide;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer;
- (void)slideTableViewCell:(SESlideTableViewCell * _Null_unspecified)cell didTriggerRightButton:(NSInteger)buttonIndex;
- (void)slideTableViewCell:(SESlideTableViewCell * _Null_unspecified)cell didSlideToState:(SESlideTableViewCellSlideState)slideState;
- (BOOL)slideTableViewCell:(SESlideTableViewCell * _Null_unspecified)cell canSlideToState:(SESlideTableViewCellSlideState)slideState;
- (null_unspecified instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Null_unspecified)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI27HCDialogsListViewController")
@interface HCDialogsListViewController : HCBaseViewController <UIScrollViewDelegate, UITableViewDataSource, UIGestureRecognizerDelegate, UITableViewDelegate>
@property (nonatomic, weak) IBOutlet UITableView * _Null_unspecified tableView;
/**
  turn this value to true if you want to include channels in this list
*/
@property (nonatomic) BOOL includeChannels;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer;
- (AFDialog * _Nullable)dialogAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/**
  Fill the avatar image view of the chat message cell
  \param indexPath the indexPath of the message cell

  \param avatarImageView the image view of the avatar inside the message cell

*/
- (void)fillAvatarAtIndexPath:(NSIndexPath * _Nonnull)indexPath avatarImageView:(UIImageView * _Nonnull)avatarImageView;
/**
  Returns a HCDialogTableViewCell
  \param indexPath the indexpath of the cell


  returns:
  an instance of HCDialogTableViewCell
*/
- (HCDialogTableViewCell * _Nonnull)dialogCellAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)dialogsListWillChange;
- (void)dialogsListDidChange;
- (void)dialogsListWillRefresh;
- (void)dialogsListDidRefresh;
- (void)insertDialogWithDialog:(AFDialog * _Nonnull)dialog indexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)removeDialogWithDialog:(AFDialog * _Nonnull)dialog indexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)updateDialogWithDialog:(AFDialog * _Nonnull)dialog indexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)reorderDialogWithDialog:(AFDialog * _Nonnull)dialog fromIndexPath:(NSIndexPath * _Nonnull)fromIndexPath toIndexPath:(NSIndexPath * _Nonnull)toIndexPath;
- (void)insertSectionWithIndexSec:(NSIndexSet * _Nonnull)indexSec;
- (void)deleteSectionWithIndexSec:(NSIndexSet * _Nonnull)indexSec;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol HCDialogsPickerViewControllerDelegate;

SWIFT_CLASS("_TtC12AppFriendsUI29HCDialogsPickerViewController")
@interface HCDialogsPickerViewController : HCDialogsListViewController
@property (nonatomic, weak) id <HCDialogsPickerViewControllerDelegate> _Nullable delegate;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP12AppFriendsUI37HCDialogsPickerViewControllerDelegate_")
@protocol HCDialogsPickerViewControllerDelegate
- (void)didChooseDialog:(AFDialog * _Nonnull)dialog;
@end

@class UIFont;

SWIFT_CLASS("_TtC12AppFriendsUI6HCFont")
@interface HCFont : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull segmentSelectorFont;)
+ (UIFont * _Nonnull)segmentSelectorFont;
+ (void)setSegmentSelectorFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull chatCellContentFont;)
+ (UIFont * _Nonnull)chatCellContentFont;
+ (void)setChatCellContentFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull chatCellSystemMessageFont;)
+ (UIFont * _Nonnull)chatCellSystemMessageFont;
+ (void)setChatCellSystemMessageFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull boldButtonFont;)
+ (UIFont * _Nonnull)boldButtonFont;
+ (void)setBoldButtonFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull dialogSettingFont;)
+ (UIFont * _Nonnull)dialogSettingFont;
+ (void)setDialogSettingFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull navigationBarTitleFont;)
+ (UIFont * _Nonnull)navigationBarTitleFont;
+ (void)setNavigationBarTitleFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull chatDialogListSectionTitleFont;)
+ (UIFont * _Nonnull)chatDialogListSectionTitleFont;
+ (void)setChatDialogListSectionTitleFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull chatTimestampFont;)
+ (UIFont * _Nonnull)chatTimestampFont;
+ (void)setChatTimestampFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull chatDateLabelFont;)
+ (UIFont * _Nonnull)chatDateLabelFont;
+ (void)setChatDateLabelFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull locationTitleFont;)
+ (UIFont * _Nonnull)locationTitleFont;
+ (void)setLocationTitleFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull locationSubtitleFont;)
+ (UIFont * _Nonnull)locationSubtitleFont;
+ (void)setLocationSubtitleFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull emptyTableLabelFont;)
+ (UIFont * _Nonnull)emptyTableLabelFont;
+ (void)setEmptyTableLabelFont:(UIFont * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI9HCGifItem")
@interface HCGifItem : NSObject
@property (nonatomic, copy) NSString * _Nullable smallSizeUrl;
@property (nonatomic, copy) NSString * _Nullable url;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CLToken;

SWIFT_CLASS("_TtC12AppFriendsUI28HCGroupCreatorViewController")
@interface HCGroupCreatorViewController : HCContactsViewController <CLTokenInputViewDelegate>
@property (nonatomic, weak) id <HCGroupCreatorViewControllerDelegate> _Nullable delegate;
@property (nonatomic, copy) NSString * _Nullable dialogID;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (void)tokenInputView:(CLTokenInputView * _Nonnull)view didAddToken:(CLToken * _Nonnull)token;
- (void)tokenInputView:(CLTokenInputView * _Nonnull)view didRemoveToken:(CLToken * _Nonnull)token;
- (void)tokenInputView:(CLTokenInputView * _Nonnull)view didChangeHeightTo:(CGFloat)height;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC12AppFriendsUI26HCImageModalViewController")
@interface HCImageModalViewController : HCBaseViewController <UIScrollViewDelegate>
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12AppFriendsUI10_HCMessage")
@interface _HCMessage : NSManagedObject
+ (NSString * _Nonnull)entityName;
+ (NSEntityDescription * _Nullable)entityWithManagedObjectContext:(NSManagedObjectContext * _Nonnull)managedObjectContext;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithManagedObjectContext:(NSManagedObjectContext * _Nonnull)managedObjectContext;
@property (nonatomic, copy) NSString * _Nullable attachmentString;
@property (nonatomic, copy) NSString * _Nullable channelID;
@property (nonatomic, copy) NSString * _Nullable customData;
@property (nonatomic, copy) NSString * _Nullable dialogID;
@property (nonatomic, strong) NSNumber * _Nullable failed;
@property (nonatomic, strong) NSNumber * _Nullable handled;
@property (nonatomic, copy) NSString * _Nullable messageID;
@property (nonatomic, copy) NSString * _Nullable messageType;
@property (nonatomic, strong) id _Nullable metadata;
@property (nonatomic, strong) NSNumber * _Nullable read;
@property (nonatomic, strong) NSNumber * _Nullable receiptRequired;
@property (nonatomic, copy) NSDate * _Nullable receiveTime;
@property (nonatomic, copy) NSString * _Nullable senderAvatar;
@property (nonatomic, copy) NSString * _Nullable senderID;
@property (nonatomic, copy) NSString * _Nullable senderName;
@property (nonatomic, copy) NSDate * _Nullable sentTime;
@property (nonatomic, copy) NSString * _Nullable tempID;
@property (nonatomic, copy) NSString * _Nullable text;
@end


SWIFT_CLASS_NAMED("HCMessage")
@interface HCMessage : _HCMessage
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI18HCOnlineUserHeader")
@interface HCOnlineUserHeader : UICollectionReusableView
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI29HCOnlineUsersBannerController")
@interface HCOnlineUsersBannerController : UICollectionViewController <HCSDKCoreOnlineUserObserver>
@property (nonatomic, weak) id <HCOnlineUsersBannerControllerDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UICollectionReusableView * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView viewForSupplementaryElementOfKind:(NSString * _Nonnull)kind atIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)onlineUserCountChangedWithCount:(NSInteger)count;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@class NSData;

SWIFT_CLASS("_TtC12AppFriendsUI12_HCPlacemark")
@interface _HCPlacemark : NSManagedObject
+ (NSString * _Nonnull)entityName;
+ (NSEntityDescription * _Nullable)entityWithManagedObjectContext:(NSManagedObjectContext * _Nonnull)managedObjectContext;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithManagedObjectContext:(NSManagedObjectContext * _Nonnull)managedObjectContext;
@property (nonatomic, copy) NSString * _Nullable locationID;
@property (nonatomic, strong) NSData * _Nullable placemark;
@property (nonatomic, copy) NSDate * _Nullable sharedTime;
@property (nonatomic, copy) NSString * _Nullable userID;
@end


SWIFT_CLASS_NAMED("HCPlacemark")
@interface HCPlacemark : _HCPlacemark
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI22HCSettingsConfiguation")
@interface HCSettingsConfiguation : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL badgeDisplayIfMuted;)
+ (BOOL)badgeDisplayIfMuted;
+ (void)setBadgeDisplayIfMuted:(BOOL)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL showNewMessageLine;)
+ (BOOL)showNewMessageLine;
+ (void)setShowNewMessageLine:(BOOL)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL messagePushNotificationEnabled;)
+ (BOOL)messagePushNotificationEnabled;
+ (void)setMessagePushNotificationEnabled:(BOOL)value;
/**
  the content rating of the gifs
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum AFGifContentRating gifContentRating;)
+ (enum AFGifContentRating)gifContentRating;
+ (void)setGifContentRating:(enum AFGifContentRating)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, HCSideDirection) {
  HCSideDirectionLeft = 0,
  HCSideDirectionRight = 1,
};

@protocol UIViewControllerContextTransitioning;
@protocol UIViewControllerInteractiveTransitioning;

SWIFT_CLASS("_TtC12AppFriendsUI19HCSidePanelAnimator")
@interface HCSidePanelAnimator : NSObject <UIViewControllerAnimatedTransitioning, UIViewControllerTransitioningDelegate>
@property (nonatomic) enum HCSideDirection slideDirection;
@property (nonatomic) BOOL presenting;
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning> _Nullable)transitionContext;
- (void)animateTransition:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed;
- (id <UIViewControllerInteractiveTransitioning> _Nullable)interactionControllerForDismissal:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animator;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol HCSidePanelViewControllerDelegate;

SWIFT_CLASS("_TtC12AppFriendsUI25HCSidePanelViewController")
@interface HCSidePanelViewController : UIViewController
@property (nonatomic, weak) id <HCSidePanelViewControllerDelegate> _Nullable delegate;
- (nonnull instancetype)initWithAnimator:(HCSidePanelAnimator * _Nonnull)animator contentVC:(UIViewController * _Nonnull)contentVC OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP12AppFriendsUI33HCSidePanelViewControllerDelegate_")
@protocol HCSidePanelViewControllerDelegate
@optional
- (void)sidePanelWillAppearWithPanel:(HCSidePanelViewController * _Nonnull)panel;
- (void)sidePanelDidAppearWithPanel:(HCSidePanelViewController * _Nonnull)panel;
- (void)sidePanelWillDisappearWithPanel:(HCSidePanelViewController * _Nonnull)panel;
- (void)sidePanelDidDisappearWithPanel:(HCSidePanelViewController * _Nonnull)panel;
@end


SWIFT_CLASS("_TtC12AppFriendsUI6HCSize")
@interface HCSize : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) CGFloat chatCellContentDefaultPointSize;)
+ (CGFloat)chatCellContentDefaultPointSize;
+ (void)setChatCellContentDefaultPointSize:(CGFloat)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) CGFloat chatCellContentBubbleCornerRadius;)
+ (CGFloat)chatCellContentBubbleCornerRadius;
+ (void)setChatCellContentBubbleCornerRadius:(CGFloat)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) CGFloat chatCellUserNameLabelHeight;)
+ (CGFloat)chatCellUserNameLabelHeight;
+ (void)setChatCellUserNameLabelHeight:(CGFloat)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) CGFloat chatDialogListSectionHeight;)
+ (CGFloat)chatDialogListSectionHeight;
+ (void)setChatDialogListSectionHeight:(CGFloat)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) CGFloat sidePanelWindowWidth;)
+ (CGFloat)sidePanelWindowWidth;
+ (void)setSidePanelWindowWidth:(CGFloat)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI14HCStringValues")
@interface HCStringValues : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull channelTabTitle;)
+ (NSString * _Nonnull)channelTabTitle;
+ (void)setChannelTabTitle:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull dialogsTabTitle;)
+ (NSString * _Nonnull)dialogsTabTitle;
+ (void)setDialogsTabTitle:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull contactsTabTitle;)
+ (NSString * _Nonnull)contactsTabTitle;
+ (void)setContactsTabTitle:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull videoSizeOverError;)
+ (NSString * _Nonnull)videoSizeOverError;
+ (void)setVideoSizeOverError:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull seenByLabelText;)
+ (NSString * _Nonnull)seenByLabelText;
+ (void)setSeenByLabelText:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull dialogsListChannelsSectionTitle;)
+ (NSString * _Nonnull)dialogsListChannelsSectionTitle;
+ (void)setDialogsListChannelsSectionTitle:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull dialogsListDialogsSectionTitle;)
+ (NSString * _Nonnull)dialogsListDialogsSectionTitle;
+ (void)setDialogsListDialogsSectionTitle:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull recentHistory;)
+ (NSString * _Nonnull)recentHistory;
+ (void)setRecentHistory:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull currentLocation;)
+ (NSString * _Nonnull)currentLocation;
+ (void)setCurrentLocation:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull noSearchHistory;)
+ (NSString * _Nonnull)noSearchHistory;
+ (void)setNoSearchHistory:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull locationTitleDefault;)
+ (NSString * _Nonnull)locationTitleDefault;
+ (void)setLocationTitleDefault:(NSString * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI24HCTopAlignedContentLabel")
@interface HCTopAlignedContentLabel : UILabel
- (void)drawTextInRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI7_HCUser")
@interface _HCUser : NSManagedObject
+ (NSString * _Nonnull)entityName;
+ (NSEntityDescription * _Nullable)entityWithManagedObjectContext:(NSManagedObjectContext * _Nonnull)managedObjectContext;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithManagedObjectContext:(NSManagedObjectContext * _Nonnull)managedObjectContext;
@property (nonatomic, copy) NSString * _Nullable avatar;
@property (nonatomic, strong) NSNumber * _Nullable blocked;
@property (nonatomic, copy) NSString * _Nullable customData;
@property (nonatomic, copy) NSString * _Nullable email;
@property (nonatomic, strong) id _Nullable followers;
@property (nonatomic, strong) id _Nullable following;
@property (nonatomic, strong) id _Nullable friends;
@property (nonatomic, copy) NSString * _Nullable userID;
@property (nonatomic, copy) NSString * _Nullable userName;
@property (nonatomic, strong) NSSet * _Nonnull dialogs;
- (NSMutableSet * _Nonnull)dialogsSet;
@end


SWIFT_CLASS_NAMED("HCUser")
@interface HCUser : _HCUser
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class UISearchBar;

SWIFT_CLASS("_TtC12AppFriendsUI26HCUserSearchViewController")
@interface HCUserSearchViewController : HCBaseViewController <UIBarPositioningDelegate, UITableViewDataSource, UISearchBarDelegate, UIScrollViewDelegate, UITableViewDelegate>
@property (nonatomic, weak) IBOutlet UISearchBar * _Null_unspecified searchBar;
@property (nonatomic, weak) IBOutlet UITableView * _Null_unspecified tableView;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (HCUser * _Nullable)userAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)searchBarSearchButtonClicked:(UISearchBar * _Nonnull)searchBar;
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI7HCUtils")
@interface HCUtils : NSObject
+ (NSString * _Nonnull)createUniqueID;
+ (NSDictionary<NSString *, id> * _Nullable)dictionaryFromJsonString:(NSString * _Nonnull)text;
+ (UIImage * _Nullable)imageInHCBundle:(NSString * _Nonnull)name;
+ (NSBundle * _Nullable)xibBundle;
+ (NSBundle * _Nullable)coreDataBundle;
+ (NSBundle * _Nullable)appFriendsBundle;
+ (void)registerNib:(UITableView * _Nonnull)tableView nibName:(NSString * _Nonnull)nibName forCellReuseIdentifier:(NSString * _Nonnull)identifier;
+ (NSString * _Nonnull)messageTimestampString:(NSDate * _Nullable)date;
+ (NSString * _Nonnull)messageDateLabelString:(NSDate * _Nullable)date;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface MKMapItem (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface MKPlacemark (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface NSDictionary (SWIFT_EXTENSION(AppFriendsUI))
@end

@class UITouch;
@class UIEvent;

SWIFT_CLASS("_TtC12AppFriendsUI9SMSegment")
@interface SMSegment : UIView
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, strong) UIImage * _Nullable onSelectionImage;
@property (nonatomic, strong) UIImage * _Nullable offSelectionImage;
@property (nonatomic, readonly) NSInteger index;
@property (nonatomic, readonly) BOOL isSelected;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12AppFriendsUI13SMSegmentView")
@interface SMSegmentView : UIControl
@property (nonatomic, strong) UIColor * _Nonnull dividerColour;
@property (nonatomic) CGFloat dividerWidth;
@property (nonatomic) NSInteger selectedSegmentIndex;
@property (nonatomic, readonly) NSInteger numberOfSegments;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)addSegmentWithTitle:(NSString * _Nullable)title onSelectionImage:(UIImage * _Nullable)onSelectionImage offSelectionImage:(UIImage * _Nullable)offSelectionImage;
- (void)insertSegmentWithTitle:(NSString * _Nullable)title onSelectionImage:(UIImage * _Nullable)onSelectionImage offSelectionImage:(UIImage * _Nullable)offSelectionImage index:(NSInteger)index;
- (void)removeSegmentAtIndex:(NSInteger)index;
- (void)layoutSubviews;
- (void)drawRect:(CGRect)rect;
@end


@interface NSTimer (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UIBarButtonItem (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UIButton (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UIColor (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UIFont (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UIImage (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UIImage (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UIImage (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UIImageView (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UILabel (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UILabel (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UITextView (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UIView (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UIView (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UIView (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UIView (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UIView (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UIView (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UIView (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UIView (SWIFT_EXTENSION(AppFriendsUI))
@property (nonatomic, copy) NSString * _Nullable badge;
@end


@interface UIView (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UIView (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UIView (SWIFT_EXTENSION(AppFriendsUI))
@end


@interface UIViewController (SWIFT_EXTENSION(AppFriendsUI))
@end




@interface _HCChatDialog (SWIFT_EXTENSION(AppFriendsUI))
- (void)addMembers:(NSSet * _Nonnull)objects;
- (void)removeMembers:(NSSet * _Nonnull)objects;
- (void)addMembersObject:(HCUser * _Nonnull)value;
- (void)removeMembersObject:(HCUser * _Nonnull)value;
@end





@interface _HCUser (SWIFT_EXTENSION(AppFriendsUI))
- (void)addDialogs:(NSSet * _Nonnull)objects;
- (void)removeDialogs:(NSSet * _Nonnull)objects;
- (void)addDialogsObject:(HCChatDialog * _Nonnull)value;
- (void)removeDialogsObject:(HCChatDialog * _Nonnull)value;
@end

#pragma clang diagnostic pop
