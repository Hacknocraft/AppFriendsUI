// Generated by Apple Swift version 4.0 (swiftlang-900.0.65 clang-900.0.37)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import CoreGraphics;
@import Foundation;
@import SlackTextViewController;
@import AppFriendsCore;
@import MapKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("AppFriendsUI")

/// message attachment base class
SWIFT_CLASS("_TtC12AppFriendsUI12AFAttachment")
@interface AFAttachment : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, AFAttachmentType) {
  AFAttachmentTypeImage = 0,
  AFAttachmentTypeVideo = 1,
  AFAttachmentTypeGif = 2,
  AFAttachmentTypeLocation = 3,
  AFAttachmentTypeGameScore = 4,
};

@class AFMessage;
@class NSError;

/// Dialog interface provides api to access, create and update dialog
SWIFT_CLASS("_TtC12AppFriendsUI8AFDialog")
@interface AFDialog : NSObject
/// send typing started signal
- (void)startTyping;
/// send typing end signal
- (void)endTyping;
/// Resend a failed message
/// \param message message to resend
///
/// \param completion completion block. Will contain the error if the call failed
///
- (void)resendMessageWithMessage:(AFMessage * _Nonnull)message completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Leave a dialog
/// \param dialog the dialog which the user wants to leave
///
/// \param completion completion block. Will contain the error if the call failed
///
- (void)leaveDialogWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// mute a dialog
/// \param completion completion block. Will contain the error if the call failed
///
- (void)muteWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// unmute a dialog
/// \param completion completion block. Will contain the error if the call failed
///
- (void)unmuteWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Update group dialog name
/// \param name new name of the group dialog
///
/// \param completion completion block. Will contain the error if the call failed
///
- (void)updateDialogNameWithDialogName:(NSString * _Nonnull)name completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Add members to a group dialog
/// \param members provide user id array containing users to be added to the dialog
///
/// \param completion completion block. Will contain the error if the call failed
///
- (void)addMembersWithNewMembers:(NSArray<NSString *> * _Nonnull)members completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Get all the IDs of the members in the dialog
///
/// returns:
/// the IDs of all the members of the dialog
- (NSArray<NSString *> * _Nonnull)memberIDs SWIFT_WARN_UNUSED_RESULT;
/// Create a group dialog with multiple users
/// \param id Optional, but you can choose to provide an unique id to the dialog yourself. If this value is not provided, we will create an unique id for you. This is a good way for you to bind the dialog with certain feature or part of your app.
///
/// \param members 
///
/// \param customData the custom data string of the user. You can use this to attach additional information of the dialog
///
/// \param pushData additional data you can include to the push notification generated inside this dialog
///
/// \param title dialog title, if not provided, the default dialog title will be used
///
/// \param completion completion block. The id of the newly created dialog will be found here. Will contain the error if the call failed
///
+ (void)createGroupDialogWithDialogID:(NSString * _Nullable)id members:(NSArray<NSString *> * _Nonnull)members customData:(NSString * _Nullable)customData pushData:(NSString * _Nullable)pushData title:(NSString * _Nullable)title completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
/// Create an 1:1 dialog between the current user with another user. If there’s already a dialog exists with the two users, the same dialog will be returned.
/// \param userID id of the other user
///
/// \param completion completion block. Will contain the error if the call failed
///
+ (void)createIndividualDialogWithUser:(NSString * _Nonnull)userID completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
/// get all channel dialogs that the user is currently in
/// \param completion completion block will contain the list of dialogs or an error if request failed
///
+ (void)getChannelsWithCompletion:(void (^ _Nullable)(NSArray<AFDialog *> * _Nullable, NSError * _Nullable))completion;
/// get all private dialogs that the user is currently in
/// \param completion completion block will contain the list of dialogs or an error if request failed
///
+ (void)getDialogsWithCompletion:(void (^ _Nullable)(NSArray<AFDialog *> * _Nullable, NSError * _Nullable))completion;
/// Fetch a dialog using dialog id
/// \param id dialog id used to fetch the dialog information
///
/// \param completion completion block will contain the dialog object or an error if request failed
///
+ (void)getDialogWithDialogID:(NSString * _Nonnull)id completion:(void (^ _Nullable)(AFDialog * _Nullable, NSError * _Nullable))completion;
/// Total unread message count
///
/// returns:
/// return the total unread message count
+ (NSInteger)totalUnreadMessageCount SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, AFDialogType) {
  AFDialogTypeUnknown = -1,
  AFDialogTypeIndividual = 0,
  AFDialogTypeGroup = 1,
  AFDialogTypeChannel = 2,
};

enum AFEventName : NSInteger;
@protocol AFEventSubscriber;

/// Events are used as a way to actively communicate with the hosting app. Inside of our SDK/platform. Developers should be able to add multiple observers to monitor events that the SDK emits
SWIFT_CLASS("_TtC12AppFriendsUI7AFEvent")
@interface AFEvent : NSObject
/// Event name
@property (nonatomic, readonly) enum AFEventName name;
/// Event data object
@property (nonatomic, readonly) id _Nullable data;
/// subscribe an object to receive the emitted events
/// \param object the subscriber
///
+ (void)subscribeWithSubscriber:(id <AFEventSubscriber> _Nonnull)object;
/// unsubscribe an object to receive the emitted events
/// \param object the subscriber
///
+ (void)unsubscribeWithSubscriber:(id <AFEventSubscriber> _Nonnull)object;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, AFEventName) {
  AFEventNameEventDialogCreated = 0,
  AFEventNameEventDialogLeft = 1,
  AFEventNameEventDialogUpdated = 2,
  AFEventNameEventTypingStatusUpdated = 4,
  AFEventNameEventMessageReceived = 5,
  AFEventNameEventUserSelected = 6,
  AFEventNameEventDuplicateSession = 7,
  AFEventNameEventTotalUnreadCountChange = 8,
};


SWIFT_PROTOCOL("_TtP12AppFriendsUI17AFEventSubscriber_")
@protocol AFEventSubscriber
- (void)emitEvent:(AFEvent * _Nonnull)event;
@end


/// game score attachment
SWIFT_CLASS("_TtC12AppFriendsUI21AFGameScoreAttachment")
@interface AFGameScoreAttachment : AFAttachment
@end


/// gif attachement
SWIFT_CLASS("_TtC12AppFriendsUI15AFGifAttachment")
@interface AFGifAttachment : AFAttachment
@end

typedef SWIFT_ENUM(NSInteger, AFGifContentRating) {
  AFGifContentRatingYouth = 0,
  AFGifContentRatingGeneral = 1,
  AFGifContentRatingParentalGuide = 2,
  AFGifContentRatingParentalGuide13 = 3,
  AFGifContentRatingRestricted = 4,
};

typedef SWIFT_ENUM(NSInteger, AFGifContentType) {
  AFGifContentTypeSticker = 0,
  AFGifContentTypeNormal = 1,
};


/// image attachment
SWIFT_CLASS("_TtC12AppFriendsUI17AFImageAttachment")
@interface AFImageAttachment : AFAttachment
@end


/// Location attachment
SWIFT_CLASS("_TtC12AppFriendsUI20AFLocationAttachment")
@interface AFLocationAttachment : AFAttachment
@end


SWIFT_CLASS("_TtC12AppFriendsUI9AFMessage")
@interface AFMessage : NSObject
/// check if the message is sent by the current user
///
/// returns:
/// true if the sender is the current user
- (BOOL)isOutgoing SWIFT_WARN_UNUSED_RESULT;
/// mark the message as read, and also post a read receipt to acknownledge the current user has read the message.
/// Note: this will only work on messages sent by other users
- (void)markAsRead;
/// mark the message as received, and also post a received receipt to acknownledge the current user has received the message on the device, but not necessarily read it.
/// Note: this will only work on messages sent by other users
- (void)markAsReceived;
/// get receipts of the message
/// \param completion completion block will contain the users id’s for those who received the message and the users id’s for those who have read the message
///
- (void)getReceiptsWithCompletion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
/// check if the message is a system message
///
/// returns:
/// true if the message is a system message
- (BOOL)isSystemMessage SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, AFMessageSendingStatus) {
  AFMessageSendingStatusSending = 0,
  AFMessageSendingStatusSuccess = 1,
  AFMessageSendingStatusFailed = 2,
};


/// Push notification API’s
SWIFT_CLASS("_TtC12AppFriendsUI18AFPushNotification")
@interface AFPushNotification : NSObject
/// Registering the current device for push notification
/// \param token the push token to be used
///
/// \param completion callback, which would report error if the call failed
///
+ (void)registerDeviceForPushNotificationWithPushToken:(NSString * _Nonnull)token completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Unregistering the current device for push notification
/// \param token the push token to be used
///
/// \param completion callback, which would report error if the call failed
///
+ (void)unregisterDeviceForPushNotificationWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Process the remote push notification. Please pass the notification object to us so we can help
/// optimize the user experience. Especially if you are entering the app using the push notification sent by AppFriends. We will only look at push notification coming from AppFriends.
/// \param info user info object inside the push notification
///
///
/// returns:
/// true if AppFriends SDK used the push notification
+ (BOOL)processPushNotificationWithNotificationUserInfo:(NSDictionary * _Nonnull)info SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Pubic interface for user session related functions
SWIFT_CLASS("_TtC12AppFriendsUI9AFSession")
@interface AFSession : NSObject
/// Perform login with a username and user id
/// \param name the username
///
/// \param id the id of the user
///
/// \param completion will call back with the user’s token, or if the login failed, it will callback with error
///
+ (void)loginWithUsername:(NSString * _Nonnull)name userID:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
/// Logout the current user.
/// <em>warning</em>* Please Note that this call alone does not unregister the device for push notification. If you have previously registered the device for push, we recommand calling AFSession.unregisterDeviceForPushNotification before you call logout.
/// \param completion call back block, which will have an error if the logout has failed
///
+ (void)logoutWithComplete:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Check if there’s an user currently logged in
///
/// returns:
/// true if the user is logged in
+ (BOOL)isLoggedIn SWIFT_WARN_UNUSED_RESULT;
/// get the current user id
///
/// returns:
/// the current user id
+ (NSString * _Nullable)currentUserID SWIFT_WARN_UNUSED_RESULT;
/// get the current user name
///
/// returns:
/// the current user name
+ (NSString * _Nullable)currentUserName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI7AFToken")
@interface AFToken : NSObject
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSCoder;
@class UITextField;

SWIFT_CLASS("_TtC12AppFriendsUI16AFTokenInputView")
@interface AFTokenInputView : UIView <UITextFieldDelegate>
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (void)tintColorDidChange;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (void)drawRect:(CGRect)rect;
@end




SWIFT_PROTOCOL("_TtP12AppFriendsUI24AFTokenInputViewDelegate_")
@protocol AFTokenInputViewDelegate
@optional
- (void)tokenInputViewDidEndEditing:(AFTokenInputView * _Nonnull)view;
- (void)tokenInputViewDidBeginEditing:(AFTokenInputView * _Nonnull)view;
- (BOOL)tokenInputViewShouldReturn:(AFTokenInputView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
- (void)tokenInputView:(AFTokenInputView * _Nonnull)view didChangeText:(NSString * _Nullable)text;
- (void)tokenInputView:(AFTokenInputView * _Nonnull)view didAdd:(AFToken * _Nonnull)token;
- (void)tokenInputView:(AFTokenInputView * _Nonnull)view didRemove:(AFToken * _Nonnull)token;
- (AFToken * _Nullable)tokenInputView:(AFTokenInputView * _Nonnull)view tokenForText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)tokenInputView:(AFTokenInputView * _Nonnull)view didChangeHeightTo:(CGFloat)height;
@end


/// AFUser object which contains information of a user. This class also provides public interface to access user data
SWIFT_CLASS("_TtC12AppFriendsUI6AFUser")
@interface AFUser : NSObject
/// user id
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// user name
@property (nonatomic, readonly, copy) NSString * _Nonnull username;
/// avatar url string
@property (nonatomic, readonly, copy) NSString * _Nullable avatarURL;
/// if the user has been blocked by the current user
@property (nonatomic, readonly) BOOL blocked;
/// the custom data string of the user. You can use this to attach additional information of the user
@property (nonatomic, copy) NSString * _Nullable customData;
/// Users are equal if their ids are the same
/// \param object another user to copare
///
///
/// returns:
/// true if the two users have the same id
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Search for user using username
/// \param query search text
///
/// \param completion completion block which will return an array of result AFUser. It reports error if it fails
///
+ (void)searchWithQuery:(NSString * _Nonnull)query completion:(void (^ _Nullable)(NSArray<AFUser *> * _Nullable, NSError * _Nullable))completion;
/// fetch a single user from the user id
/// \param id user’s id
///
/// \param completion completion block contains the user object, or the error if the request failed
///
+ (void)getUserWithUserID:(NSString * _Nonnull)id completion:(void (^ _Nullable)(AFUser * _Nullable, NSError * _Nullable))completion;
/// fetch the friends of the current user (user who are followed and followed back)
/// \param completion completion block which contains the a list of user ids of the followers, or error if the request failed
///
+ (void)getFriendsWithCompletion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
/// get the users who are following the current user
/// \param completion completion block which contains the a list of user ids of the followers, or error if the request failed
///
+ (void)getFollowersWithCompletion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
/// get the users who the current user is following
/// \param completion completion block which contains the a list of user ids, or error if the request failed
///
+ (void)getFollowingCompletion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
/// make the current user follow another user
/// \param id the id of the user who you are going to follow
///
/// \param completion completion block, reports an error if the call failed
///
+ (void)followUserWithUserID:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// make the current user unfollow another user
/// \param id the id of the user who you are going to unfollow
///
/// \param completion completion block, reports an error if the call failed
///
+ (void)unfollowUserWithUserID:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// block an user. After blocking, the user will not be able to send message to the current user
/// \param id id of the user to be blocked
///
/// \param completion completion block. If the call fails, it will contain the error
///
+ (void)blockUserWithUserID:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// unblock an user
/// \param id id of the user to be blocked
///
/// \param completion completion block. If the call fails, it will contain the error
///
+ (void)unblockUserWithUserID:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// fetch the list of all blocked users
/// \param completion completion block. If the call is successful, it will return an array of blocked user ids. If it fails, it will contain the error
///
+ (void)getBlockedUsersWithCompletion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
/// Using an user id to check if the user is blocked
/// \param userID id of the user to be checked on
///
/// \param completion completion block. If the call is successful, it will return result. If it fails, it will contain the error
///
+ (void)checkIfUserIsBlocked:(NSString * _Nonnull)userID completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// update username of the current user
/// \param username new username
///
/// \param completion completion block. Will report error if the call fails
///
+ (void)updateUserNameWithUsername:(NSString * _Nonnull)username completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// update avatar of the current user
/// \param avatar new avatar url
///
/// \param completion completion block. Will report error if the call fails
///
+ (void)updateUserAvatarWithAvatar:(NSString * _Nonnull)avatar completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// update avatar and username of the current user
/// \param username the new username
///
/// \param avatar the new avatar url
///
/// \param completion completion block. Will report error if the call fails
///
+ (void)updateUserWithUsername:(NSString * _Nullable)username avatar:(NSString * _Nullable)avatar completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// update custom data of the current user
/// \param custom data new custom data
///
/// \param completion completion block. Will report error if the call fails
///
+ (void)updateUserCustomDataWithCustomData:(NSString * _Nonnull)customData completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// get the current user
///
/// returns:
/// the current user object or nil if you haven’t logged in yet
+ (AFUser * _Nullable)currentUser SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// video attachement
SWIFT_CLASS("_TtC12AppFriendsUI17AFVideoAttachment")
@interface AFVideoAttachment : AFAttachment
@end

@class UIViewController;
enum HCSidePanelBackgroundMode : NSInteger;
@class HCSidePanelViewController;

SWIFT_CLASS("_TtC12AppFriendsUI12AppFriendsUI")
@interface AppFriendsUI : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AppFriendsUI * _Nonnull sharedInstance;)
+ (AppFriendsUI * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (void)initialize:(NSString * _Nonnull)appKey secret:(NSString * _Nonnull)secret completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (BOOL)initialized SWIFT_WARN_UNUSED_RESULT;
- (HCSidePanelViewController * _Nonnull)presentVCInSidePanelFromVC:(UIViewController * _Nonnull)fromVC showVC:(UIViewController * _Nonnull)showVC backgroundMode:(enum HCSidePanelBackgroundMode)backgroundMode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC12AppFriendsUI14BlockLongPress")
@interface BlockLongPress : UILongPressGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action SWIFT_UNAVAILABLE;
- (void)didLongPressed:(UILongPressGestureRecognizer * _Nonnull)longPress;
@end


/// Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC12AppFriendsUI8BlockPan")
@interface BlockPan : UIPanGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action SWIFT_UNAVAILABLE;
- (void)didPan:(UIPanGestureRecognizer * _Nonnull)pan;
@end


/// Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC12AppFriendsUI10BlockPinch")
@interface BlockPinch : UIPinchGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action SWIFT_UNAVAILABLE;
- (void)didPinch:(UIPinchGestureRecognizer * _Nonnull)pinch;
@end


/// Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC12AppFriendsUI10BlockSwipe")
@interface BlockSwipe : UISwipeGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action SWIFT_UNAVAILABLE;
- (void)didSwipe:(UISwipeGestureRecognizer * _Nonnull)swipe;
@end


/// Make sure you use  “[weak self] (gesture) in” if you are using the keyword self inside the closure or there might be a memory leak
SWIFT_CLASS("_TtC12AppFriendsUI8BlockTap")
@interface BlockTap : UITapGestureRecognizer
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action SWIFT_UNAVAILABLE;
- (void)didTap:(UITapGestureRecognizer * _Nonnull)tap;
@end


SWIFT_CLASS("_TtC12AppFriendsUI16CoreStoreManager")
@interface CoreStoreManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSBundle;

SWIFT_CLASS("_TtC12AppFriendsUI20HCBaseViewController")
@interface HCBaseViewController : UIViewController
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
@end


SWIFT_CLASS("_TtC12AppFriendsUI21HCAlbumViewController")
@interface HCAlbumViewController : HCBaseViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UICollectionView;
@class UICollectionViewLayout;

@interface HCAlbumViewController (SWIFT_EXTENSION(AppFriendsUI)) <UICollectionViewDelegateFlowLayout>
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout referenceSizeForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout referenceSizeForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end

@class HCChatTableViewCell;

SWIFT_PROTOCOL("_TtP12AppFriendsUI27HCChatTableViewCellDelegate_")
@protocol HCChatTableViewCellDelegate
- (void)attachmentTappedInCell:(HCChatTableViewCell * _Nonnull)cell;
- (void)avatarTappedInCell:(HCChatTableViewCell * _Nonnull)cell;
- (void)failedButtonTappedInCell:(HCChatTableViewCell * _Nonnull)cell;
- (void)linkTappedInCell:(HCChatTableViewCell * _Nonnull)cell url:(NSURL * _Nonnull)url;
- (void)reportButtonTappedInCell:(HCChatTableViewCell * _Nonnull)cell;
@end

@class UITableView;
@class UITextView;
@class UITableViewCell;
@class UIImagePickerController;
@class UIScrollView;
@class UIGestureRecognizer;
@class UIBarButtonItem;

/// This is the base chat view controller, which display the conversation (chat view)
SWIFT_CLASS("_TtC12AppFriendsUI24HCBaseChatViewController")
@interface HCBaseChatViewController : SLKTextViewController <AFEventSubscriber, HCChatTableViewCellDelegate, UIImagePickerControllerDelegate, UINavigationControllerDelegate>
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
@property (nonatomic, readonly, strong) UITableView * _Nonnull tableView;
/// Action when right button, which is the send button, is triggered
/// \param sender the send button
///
- (void)didPressRightButton:(id _Nullable)sender;
- (void)didPressLeftButton:(id _Nullable)sender;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
- (CGFloat)heightForAutoCompletionView SWIFT_WARN_UNUSED_RESULT;
- (void)didChangeAutoCompletionPrefix:(NSString * _Nonnull)prefix andWord:(NSString * _Nonnull)word;
- (void)showAutoCompletionView:(BOOL)show;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didEndDisplayingCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSIndexPath * _Nullable)tableView:(UITableView * _Nonnull)tableView willSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)imagePickerControllerDidCancel:(UIImagePickerController * _Nonnull)picker;
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *, id> * _Nonnull)info;
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (void)emitEvent:(AFEvent * _Nonnull)event;
/// The right side navigation bar item. You can override this function to have your own navigation bar item
///
/// returns:
/// the navigation bar item
- (UIBarButtonItem * _Nullable)rightBarButtonItem SWIFT_WARN_UNUSED_RESULT;
/// Link inside a chat cell is tapped
/// \param cell cell which contains the link
///
/// \param url the url that is tapped
///
- (void)linkTappedInCell:(HCChatTableViewCell * _Nonnull)cell url:(NSURL * _Nonnull)url;
/// Failed button is tapped in chat cell
/// \param cell the cell which contains the fail button
///
- (void)failedButtonTappedInCell:(HCChatTableViewCell * _Nonnull)cell;
/// avatar is tapped in chat cell
/// \param cell the cell which contains the avatar
///
- (void)avatarTappedInCell:(HCChatTableViewCell * _Nonnull)cell;
/// Triggered when attachment in the cell is tapped
/// \param cell the cell that contains the attachment
///
- (void)attachmentTappedInCell:(HCChatTableViewCell * _Nonnull)cell;
- (void)reportButtonTappedInCell:(HCChatTableViewCell * _Nonnull)cell;
- (nullable instancetype)initWithTableViewStyle:(UITableViewStyle)style SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end





















SWIFT_PROTOCOL("_TtP12AppFriendsUI37HCOnlineUsersBannerControllerDelegate_")
@protocol HCOnlineUsersBannerControllerDelegate
- (void)userSelected:(NSString * _Nonnull)userID;
@end


SWIFT_CLASS("_TtC12AppFriendsUI32HCChannelChatContainerController")
@interface HCChannelChatContainerController : HCBaseViewController <HCOnlineUsersBannerControllerDelegate, UIGestureRecognizerDelegate>
- (nonnull instancetype)initWithDialogID:(NSString * _Nonnull)dialogID;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (void)userSelected:(NSString * _Nonnull)userID;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12AppFriendsUI27HCChannelChatViewController")
@interface HCChannelChatViewController : HCBaseChatViewController
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (UIBarButtonItem * _Nullable)rightBarButtonItem SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)fetchMoreMessages;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI22HCChannelTableViewCell")
@interface HCChannelTableViewCell : UITableViewCell
- (void)awakeFromNib;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI28HCChannelsListViewController")
@interface HCChannelsListViewController : HCBaseViewController <UITableViewDataSource, UITableViewDelegate>
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class HCGroupCreatorViewController;

SWIFT_PROTOCOL("_TtP12AppFriendsUI36HCGroupCreatorViewControllerDelegate_")
@protocol HCGroupCreatorViewControllerDelegate
- (void)usersSelected:(NSArray<NSString *> * _Nonnull)users;
- (void)closeButtonTapped:(HCGroupCreatorViewController * _Nonnull)selectVC;
@end

@class SMSegmentView;

SWIFT_CLASS("_TtC12AppFriendsUI29HCChatContainerViewController")
@interface HCChatContainerViewController : HCBaseViewController <HCGroupCreatorViewControllerDelegate>
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (void)close;
- (void)moreButtonTapped;
- (void)switchTabs:(SMSegmentView * _Nonnull)segmentView;
- (void)usersSelected:(NSArray<NSString *> * _Nonnull)users;
- (void)closeButtonTapped:(HCGroupCreatorViewController * _Nonnull)selectVC;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class NSTextContainer;

SWIFT_CLASS("_TtC12AppFriendsUI17HCChatContentView")
@interface HCChatContentView : UITextView
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=7.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSLayoutConstraint;
@class UILabel;
@class UIImageView;
@class UIButton;

SWIFT_CLASS("_TtC12AppFriendsUI19HCChatTableViewCell")
@interface HCChatTableViewCell : UITableViewCell <UITextViewDelegate>
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Nullable messageWidthConstraint;
@property (nonatomic, strong) IBOutlet NSLayoutConstraint * _Nullable messageLeadingConstraint;
@property (nonatomic, strong) IBOutlet NSLayoutConstraint * _Nullable messageTrailingConstraint;
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Nullable userNameHeightConstraint;
@property (nonatomic, weak) IBOutlet UILabel * _Nullable userNameLabel;
@property (nonatomic, weak) IBOutlet HCChatContentView * _Nullable messageContentLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Nullable seenByLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Nullable dateLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Nullable timeLabel;
@property (nonatomic, weak) IBOutlet UIImageView * _Nullable userAvatarImageView;
@property (nonatomic, weak) IBOutlet UIImageView * _Nullable contentImageView;
@property (nonatomic, weak) IBOutlet UIButton * _Nullable failedButton;
@property (nonatomic, weak) IBOutlet UILabel * _Nullable videoPlayIcon;
- (void)awakeFromNib;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@class UIColor;

SWIFT_CLASS("_TtC12AppFriendsUI14HCColorPalette")
@interface HCColorPalette : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatBackgroundColor;)
+ (UIColor * _Nonnull)chatBackgroundColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatBackgroundColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatDialogCellBackgroundColor;)
+ (UIColor * _Nonnull)chatDialogCellBackgroundColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatDialogCellBackgroundColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatMessageCellBackgroundColor;)
+ (UIColor * _Nonnull)chatMessageCellBackgroundColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatMessageCellBackgroundColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatOutMessageContentTextColor;)
+ (UIColor * _Nonnull)chatOutMessageContentTextColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatOutMessageContentTextColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatInMessageContentTextColor;)
+ (UIColor * _Nonnull)chatInMessageContentTextColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatInMessageContentTextColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatUserNamelTextColor;)
+ (UIColor * _Nonnull)chatUserNamelTextColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatUserNamelTextColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatTimeLabelTextColor;)
+ (UIColor * _Nonnull)chatTimeLabelTextColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatTimeLabelTextColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatDateLabelTextColor;)
+ (UIColor * _Nonnull)chatDateLabelTextColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatDateLabelTextColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatSystemMessageColor;)
+ (UIColor * _Nonnull)chatSystemMessageColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatSystemMessageColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatSendButtonColor;)
+ (UIColor * _Nullable)chatSendButtonColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatSendButtonColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatOutMessageBubbleColor;)
+ (UIColor * _Nullable)chatOutMessageBubbleColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatOutMessageBubbleColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatInMessageBubbleColor;)
+ (UIColor * _Nullable)chatInMessageBubbleColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatInMessageBubbleColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatMessageFailedButtonColor;)
+ (UIColor * _Nullable)chatMessageFailedButtonColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatMessageFailedButtonColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatVideoPlayIconColor;)
+ (UIColor * _Nonnull)chatVideoPlayIconColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatVideoPlayIconColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatLeaveConversationColor;)
+ (UIColor * _Nullable)chatLeaveConversationColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatLeaveConversationColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatDialogListSectionTitleColor;)
+ (UIColor * _Nullable)chatDialogListSectionTitleColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatDialogListSectionTitleColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatDialogListSectionBgColor;)
+ (UIColor * _Nullable)chatDialogListSectionBgColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatDialogListSectionBgColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatDialogListTitleColor;)
+ (UIColor * _Nonnull)chatDialogListTitleColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatDialogListTitleColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatDialogTimeStampPreviewColor;)
+ (UIColor * _Nonnull)chatDialogTimeStampPreviewColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatDialogTimeStampPreviewColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull chatDialogMessagePreviewColor;)
+ (UIColor * _Nonnull)chatDialogMessagePreviewColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatDialogMessagePreviewColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatNewMessageDividerColor;)
+ (UIColor * _Nullable)chatNewMessageDividerColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatNewMessageDividerColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatInMessageLinkColor;)
+ (UIColor * _Nullable)chatInMessageLinkColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatInMessageLinkColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatOutMessageLinkColor;)
+ (UIColor * _Nullable)chatOutMessageLinkColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatOutMessageLinkColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatAttachmentIconColor;)
+ (UIColor * _Nullable)chatAttachmentIconColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatAttachmentIconColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatMediaMessageButtonColor;)
+ (UIColor * _Nullable)chatMediaMessageButtonColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatMediaMessageButtonColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatMediaMessageButtonBgColor;)
+ (UIColor * _Nullable)chatMediaMessageButtonBgColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatMediaMessageButtonBgColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatMediaMessageButtonBorderColor;)
+ (UIColor * _Nullable)chatMediaMessageButtonBorderColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatMediaMessageButtonBorderColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable chatMediaMessageSelectionPanelColor;)
+ (UIColor * _Nullable)chatMediaMessageSelectionPanelColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatMediaMessageSelectionPanelColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable channelChatBannerColor;)
+ (UIColor * _Nullable)channelChatBannerColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelChatBannerColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull onlineUsersLabelColor;)
+ (UIColor * _Nonnull)onlineUsersLabelColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setOnlineUsersLabelColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull onlineUserIndicatorColor;)
+ (UIColor * _Nonnull)onlineUserIndicatorColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setOnlineUserIndicatorColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable avatarBackgroundColor;)
+ (UIColor * _Nullable)avatarBackgroundColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setAvatarBackgroundColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull avatarColor;)
+ (UIColor * _Nonnull)avatarColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setAvatarColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable reportButtonTitleColor;)
+ (UIColor * _Nullable)reportButtonTitleColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setReportButtonTitleColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable reportButtonBorderColor;)
+ (UIColor * _Nullable)reportButtonBorderColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setReportButtonBorderColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull segmentSelectorColor;)
+ (UIColor * _Nonnull)segmentSelectorColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setSegmentSelectorColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable segmentSelectorOnBgColor;)
+ (UIColor * _Nullable)segmentSelectorOnBgColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setSegmentSelectorOnBgColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull segmentSelectorOffBgColor;)
+ (UIColor * _Nonnull)segmentSelectorOffBgColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setSegmentSelectorOffBgColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull segmentSelectorOnTextColor;)
+ (UIColor * _Nonnull)segmentSelectorOnTextColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setSegmentSelectorOnTextColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull segmentSelectorOffTextColor;)
+ (UIColor * _Nonnull)segmentSelectorOffTextColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setSegmentSelectorOffTextColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable tableSeparatorColor;)
+ (UIColor * _Nullable)tableSeparatorColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setTableSeparatorColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable tableBackgroundColor;)
+ (UIColor * _Nullable)tableBackgroundColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setTableBackgroundColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable tableSectionSeparatorColor;)
+ (UIColor * _Nullable)tableSectionSeparatorColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setTableSectionSeparatorColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull navigationBarIconColor;)
+ (UIColor * _Nonnull)navigationBarIconColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setNavigationBarIconColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull navigationBarTitleColor;)
+ (UIColor * _Nonnull)navigationBarTitleColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setNavigationBarTitleColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable badgeBackgroundColor;)
+ (UIColor * _Nullable)badgeBackgroundColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setBadgeBackgroundColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull closeButtonBgColor;)
+ (UIColor * _Nonnull)closeButtonBgColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setCloseButtonBgColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull closeButtonIconColor;)
+ (UIColor * _Nonnull)closeButtonIconColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setCloseButtonIconColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable searchBarTintColor;)
+ (UIColor * _Nullable)searchBarTintColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setSearchBarTintColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull emptyTableLabelColor;)
+ (UIColor * _Nonnull)emptyTableLabelColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setEmptyTableLabelColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull normalTextColor;)
+ (UIColor * _Nonnull)normalTextColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setNormalTextColor:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable placeholderTextColor;)
+ (UIColor * _Nullable)placeholderTextColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setPlaceholderTextColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable albumBackgroundColor;)
+ (UIColor * _Nullable)albumBackgroundColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setAlbumBackgroundColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable albumSectionBackgroundColor;)
+ (UIColor * _Nullable)albumSectionBackgroundColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setAlbumSectionBackgroundColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable albumSectionTitleColor;)
+ (UIColor * _Nullable)albumSectionTitleColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setAlbumSectionTitleColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable albumItemBackgroundColor;)
+ (UIColor * _Nullable)albumItemBackgroundColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setAlbumItemBackgroundColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable albumNavigationBarIconColor;)
+ (UIColor * _Nullable)albumNavigationBarIconColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setAlbumNavigationBarIconColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable albumNavigationBarTitleColor;)
+ (UIColor * _Nullable)albumNavigationBarTitleColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setAlbumNavigationBarTitleColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nullable albumNavigationBackgroundColor;)
+ (UIColor * _Nullable)albumNavigationBackgroundColor SWIFT_WARN_UNUSED_RESULT;
+ (void)setAlbumNavigationBackgroundColor:(UIColor * _Nullable)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) UIStatusBarStyle albumStatusBarStyle;)
+ (UIStatusBarStyle)albumStatusBarStyle SWIFT_WARN_UNUSED_RESULT;
+ (void)setAlbumStatusBarStyle:(UIStatusBarStyle)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI11HCConstants")
@interface HCConstants : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) double sidePanelSlideAnimationDuration;)
+ (double)sidePanelSlideAnimationDuration SWIFT_WARN_UNUSED_RESULT;
+ (void)setSidePanelSlideAnimationDuration:(double)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSUInteger maxMessageLength;)
+ (NSUInteger)maxMessageLength SWIFT_WARN_UNUSED_RESULT;
+ (void)setMaxMessageLength:(NSUInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSTimeInterval timeIntervalForMessageDateLabelDisplay;)
+ (NSTimeInterval)timeIntervalForMessageDateLabelDisplay SWIFT_WARN_UNUSED_RESULT;
+ (void)setTimeIntervalForMessageDateLabelDisplay:(NSTimeInterval)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI20HCContactSelectField")
@interface HCContactSelectField : AFTokenInputView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI22HCContactTableViewCell")
@interface HCContactTableViewCell : UITableViewCell
- (void)awakeFromNib;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI24HCContactsViewController")
@interface HCContactsViewController : HCBaseViewController
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI26HCDialogChatViewController")
@interface HCDialogChatViewController : HCBaseChatViewController <HCGroupCreatorViewControllerDelegate>
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (UIBarButtonItem * _Nullable)rightBarButtonItem SWIFT_WARN_UNUSED_RESULT;
- (void)settingButtonTapped;
- (void)emitEvent:(AFEvent * _Nonnull)event;
- (void)usersSelected:(NSArray<NSString *> * _Nonnull)users;
- (void)closeButtonTapped:(HCGroupCreatorViewController * _Nonnull)selectVC;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI32HCDialogMemberCollectionViewCell")
@interface HCDialogMemberCollectionViewCell : UICollectionViewCell
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified userAvatar;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified userNameLabel;
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UISwitch;

SWIFT_CLASS("_TtC12AppFriendsUI29HCDialogSettingViewController")
@interface HCDialogSettingViewController : HCBaseViewController <AFEventSubscriber, UICollectionViewDataSource, UICollectionViewDelegate, UITableViewDataSource, UITableViewDelegate>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)leaveDialog;
- (void)muteDialog:(UISwitch * _Nonnull)toggle;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)emitEvent:(AFEvent * _Nonnull)event;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class HCTopAlignedContentLabel;

SWIFT_CLASS("_TtC12AppFriendsUI21HCDialogTableViewCell")
@interface HCDialogTableViewCell : UITableViewCell
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified dialogAvatarImageView;
@property (nonatomic, weak) IBOutlet UIImageView * _Nullable backgroundImageView;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified userNameLabel;
@property (nonatomic, weak) IBOutlet HCTopAlignedContentLabel * _Null_unspecified lastMessageLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified lastMessageTimeLabel;
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified badgeView;
- (void)awakeFromNib;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITableViewRowAction;

/// This view controller will display a list of previous dialogs.
/// You can subclass this class to customize the behavior.
SWIFT_CLASS("_TtC12AppFriendsUI27HCDialogsListViewController")
@interface HCDialogsListViewController : HCBaseViewController <UIGestureRecognizerDelegate, UITableViewDataSource, UITableViewDelegate>
@property (nonatomic, weak) IBOutlet UITableView * _Null_unspecified tableView;
/// turn this value to true if you want to include channels in this list
@property (nonatomic) BOOL includeChannels;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (BOOL)tableView:(UITableView * _Nonnull)tableView canEditRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSArray<UITableViewRowAction *> * _Nullable)tableView:(UITableView * _Nonnull)tableView editActionsForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI29HCDialogsPickerViewController")
@interface HCDialogsPickerViewController : HCDialogsListViewController
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP12AppFriendsUI37HCDialogsPickerViewControllerDelegate_")
@protocol HCDialogsPickerViewControllerDelegate
- (void)didChooseDialog:(AFDialog * _Nonnull)dialog;
@end

@class UIFont;

SWIFT_CLASS("_TtC12AppFriendsUI6HCFont")
@interface HCFont : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull segmentSelectorFont;)
+ (UIFont * _Nonnull)segmentSelectorFont SWIFT_WARN_UNUSED_RESULT;
+ (void)setSegmentSelectorFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull chatCellContentFont;)
+ (UIFont * _Nonnull)chatCellContentFont SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatCellContentFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull chatCellSystemMessageFont;)
+ (UIFont * _Nonnull)chatCellSystemMessageFont SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatCellSystemMessageFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull boldButtonFont;)
+ (UIFont * _Nonnull)boldButtonFont SWIFT_WARN_UNUSED_RESULT;
+ (void)setBoldButtonFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull dialogSettingFont;)
+ (UIFont * _Nonnull)dialogSettingFont SWIFT_WARN_UNUSED_RESULT;
+ (void)setDialogSettingFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull navigationBarTitleFont;)
+ (UIFont * _Nonnull)navigationBarTitleFont SWIFT_WARN_UNUSED_RESULT;
+ (void)setNavigationBarTitleFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull chatTimestampFont;)
+ (UIFont * _Nonnull)chatTimestampFont SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatTimestampFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull chatDateLabelFont;)
+ (UIFont * _Nonnull)chatDateLabelFont SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatDateLabelFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull locationTitleFont;)
+ (UIFont * _Nonnull)locationTitleFont SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocationTitleFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull locationSubtitleFont;)
+ (UIFont * _Nonnull)locationSubtitleFont SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocationSubtitleFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull emptyTableLabelFont;)
+ (UIFont * _Nonnull)emptyTableLabelFont SWIFT_WARN_UNUSED_RESULT;
+ (void)setEmptyTableLabelFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull albumSectionTitleFont;)
+ (UIFont * _Nonnull)albumSectionTitleFont SWIFT_WARN_UNUSED_RESULT;
+ (void)setAlbumSectionTitleFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull chatDialogListSectionTitleFont;)
+ (UIFont * _Nonnull)chatDialogListSectionTitleFont SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatDialogListSectionTitleFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull chatDialogListCellTitleFont;)
+ (UIFont * _Nonnull)chatDialogListCellTitleFont SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatDialogListCellTitleFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull chatDialogListCellTimestampFont;)
+ (UIFont * _Nonnull)chatDialogListCellTimestampFont SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatDialogListCellTimestampFont:(UIFont * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIFont * _Nonnull chatDialogListCellLastMessageFont;)
+ (UIFont * _Nonnull)chatDialogListCellLastMessageFont SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatDialogListCellLastMessageFont:(UIFont * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI9HCGifItem")
@interface HCGifItem : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI28HCGroupCreatorViewController")
@interface HCGroupCreatorViewController : HCContactsViewController <AFTokenInputViewDelegate>
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC12AppFriendsUI26HCImageModalViewController")
@interface HCImageModalViewController : HCBaseViewController <UIScrollViewDelegate>
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified imageView;
@property (nonatomic, weak) IBOutlet UIScrollView * _Null_unspecified scrollView;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12AppFriendsUI18HCOnlineUserHeader")
@interface HCOnlineUserHeader : UICollectionReusableView
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI29HCOnlineUsersBannerController")
@interface HCOnlineUsersBannerController : UICollectionViewController <HCSDKCoreOnlineUserObserver>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UICollectionReusableView * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView viewForSupplementaryElementOfKind:(NSString * _Nonnull)kind atIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)onlineUserCountChangedWithCount:(NSInteger)count;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



SWIFT_CLASS("_TtC12AppFriendsUI22HCSettingsConfiguation")
@interface HCSettingsConfiguation : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL badgeDisplayIfMuted;)
+ (BOOL)badgeDisplayIfMuted SWIFT_WARN_UNUSED_RESULT;
+ (void)setBadgeDisplayIfMuted:(BOOL)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL showNewMessageLine;)
+ (BOOL)showNewMessageLine SWIFT_WARN_UNUSED_RESULT;
+ (void)setShowNewMessageLine:(BOOL)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL messagePushNotificationEnabled;)
+ (BOOL)messagePushNotificationEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setMessagePushNotificationEnabled:(BOOL)value;
/// the content rating of the gifs
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum AFGifContentRating gifContentRating;)
+ (enum AFGifContentRating)gifContentRating SWIFT_WARN_UNUSED_RESULT;
+ (void)setGifContentRating:(enum AFGifContentRating)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum AFGifContentType gifContentType;)
+ (enum AFGifContentType)gifContentType SWIFT_WARN_UNUSED_RESULT;
+ (void)setGifContentType:(enum AFGifContentType)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL showDialogAlbum;)
+ (BOOL)showDialogAlbum SWIFT_WARN_UNUSED_RESULT;
+ (void)setShowDialogAlbum:(BOOL)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL enableContentFlagging;)
+ (BOOL)enableContentFlagging SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnableContentFlagging:(BOOL)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, HCSideDirection) {
  HCSideDirectionLeft = 0,
  HCSideDirectionRight = 1,
};

@protocol UIViewControllerContextTransitioning;
@protocol UIViewControllerInteractiveTransitioning;

SWIFT_CLASS("_TtC12AppFriendsUI19HCSidePanelAnimator")
@interface HCSidePanelAnimator : NSObject <UIViewControllerAnimatedTransitioning, UIViewControllerTransitioningDelegate>
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning> _Nullable)transitionContext SWIFT_WARN_UNUSED_RESULT;
- (void)animateTransition:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerInteractiveTransitioning> _Nullable)interactionControllerForDismissal:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animator SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, HCSidePanelBackgroundMode) {
/// transparent, and see the background view without any mask
  HCSidePanelBackgroundModeNormal = 0,
/// darkens the background view
  HCSidePanelBackgroundModeDarken = 1,
/// blurs the background view
  HCSidePanelBackgroundModeBlur = 2,
/// blurs and darkens the background view
  HCSidePanelBackgroundModeDarkBlur = 3,
};


SWIFT_CLASS("_TtC12AppFriendsUI25HCSidePanelViewController")
@interface HCSidePanelViewController : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP12AppFriendsUI33HCSidePanelViewControllerDelegate_")
@protocol HCSidePanelViewControllerDelegate
@optional
- (void)sidePanelWillAppearWithPanel:(HCSidePanelViewController * _Nonnull)panel;
- (void)sidePanelDidAppearWithPanel:(HCSidePanelViewController * _Nonnull)panel;
- (void)sidePanelWillDisappearWithPanel:(HCSidePanelViewController * _Nonnull)panel;
- (void)sidePanelDidDisappearWithPanel:(HCSidePanelViewController * _Nonnull)panel;
@end


SWIFT_CLASS("_TtC12AppFriendsUI6HCSize")
@interface HCSize : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) CGFloat chatCellContentDefaultPointSize;)
+ (CGFloat)chatCellContentDefaultPointSize SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatCellContentDefaultPointSize:(CGFloat)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) CGFloat chatCellContentBubbleCornerRadius;)
+ (CGFloat)chatCellContentBubbleCornerRadius SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatCellContentBubbleCornerRadius:(CGFloat)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) CGFloat chatCellUserNameLabelHeight;)
+ (CGFloat)chatCellUserNameLabelHeight SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatCellUserNameLabelHeight:(CGFloat)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) CGFloat chatDialogListSectionHeight;)
+ (CGFloat)chatDialogListSectionHeight SWIFT_WARN_UNUSED_RESULT;
+ (void)setChatDialogListSectionHeight:(CGFloat)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) CGFloat sidePanelWindowWidth;)
+ (CGFloat)sidePanelWindowWidth SWIFT_WARN_UNUSED_RESULT;
+ (void)setSidePanelWindowWidth:(CGFloat)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI14HCStringValues")
@interface HCStringValues : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull channelTabTitle;)
+ (NSString * _Nonnull)channelTabTitle SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelTabTitle:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull dialogsTabTitle;)
+ (NSString * _Nonnull)dialogsTabTitle SWIFT_WARN_UNUSED_RESULT;
+ (void)setDialogsTabTitle:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull contactsTabTitle;)
+ (NSString * _Nonnull)contactsTabTitle SWIFT_WARN_UNUSED_RESULT;
+ (void)setContactsTabTitle:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull videoSizeOverError;)
+ (NSString * _Nonnull)videoSizeOverError SWIFT_WARN_UNUSED_RESULT;
+ (void)setVideoSizeOverError:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull seenByLabelText;)
+ (NSString * _Nonnull)seenByLabelText SWIFT_WARN_UNUSED_RESULT;
+ (void)setSeenByLabelText:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull dialogsListChannelsSectionTitle;)
+ (NSString * _Nonnull)dialogsListChannelsSectionTitle SWIFT_WARN_UNUSED_RESULT;
+ (void)setDialogsListChannelsSectionTitle:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull dialogsListDialogsSectionTitle;)
+ (NSString * _Nonnull)dialogsListDialogsSectionTitle SWIFT_WARN_UNUSED_RESULT;
+ (void)setDialogsListDialogsSectionTitle:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull recentHistory;)
+ (NSString * _Nonnull)recentHistory SWIFT_WARN_UNUSED_RESULT;
+ (void)setRecentHistory:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull currentLocation;)
+ (NSString * _Nonnull)currentLocation SWIFT_WARN_UNUSED_RESULT;
+ (void)setCurrentLocation:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull noSearchHistory;)
+ (NSString * _Nonnull)noSearchHistory SWIFT_WARN_UNUSED_RESULT;
+ (void)setNoSearchHistory:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull locationTitleDefault;)
+ (NSString * _Nonnull)locationTitleDefault SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocationTitleDefault:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull albumViewtitle;)
+ (NSString * _Nonnull)albumViewtitle SWIFT_WARN_UNUSED_RESULT;
+ (void)setAlbumViewtitle:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull reportButtonTitle;)
+ (NSString * _Nonnull)reportButtonTitle SWIFT_WARN_UNUSED_RESULT;
+ (void)setReportButtonTitle:(NSString * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI24HCTopAlignedContentLabel")
@interface HCTopAlignedContentLabel : UILabel
- (void)drawTextInRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UISearchBar;

SWIFT_CLASS("_TtC12AppFriendsUI26HCUserSearchViewController")
@interface HCUserSearchViewController : HCBaseViewController <UISearchBarDelegate, UITableViewDataSource, UITableViewDelegate>
@property (nonatomic, weak) IBOutlet UISearchBar * _Null_unspecified searchBar;
@property (nonatomic, weak) IBOutlet UITableView * _Null_unspecified tableView;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)searchBarSearchButtonClicked:(UISearchBar * _Nonnull)searchBar;
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12AppFriendsUI7HCUtils")
@interface HCUtils : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end







@class UITouch;
@class UIEvent;

SWIFT_CLASS("_TtC12AppFriendsUI9SMSegment")
@interface SMSegment : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12AppFriendsUI13SMSegmentView")
@interface SMSegmentView : UIControl
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)drawRect:(CGRect)rect;
@end



















































SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
